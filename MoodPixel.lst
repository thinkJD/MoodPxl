
MoodPixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000019ca  00001a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800114  00800114  00001a72  2**0
                  ALLOC
  3 .stab         00000aa4  00000000  00000000  00001a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f7  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  0000270f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004c0  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d4f  00000000  00000000  00002caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ba2  00000000  00000000  000049fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001cc6  00000000  00000000  000055a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000450  00000000  00000000  00007268  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006c0  00000000  00000000  000076b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ae9  00000000  00000000  00007d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00008861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 01 	jmp	0x270	; 0x270 <__ctors_end>
       4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
       8:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_2>
       c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      10:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      14:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      18:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      1c:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_7>
      20:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      24:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      28:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      2c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      30:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      34:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__vector_13>
      38:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      3c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      40:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_16>
      44:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      48:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      4c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_19>
      50:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_20>
      54:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_21>
      58:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_22>
      5c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      60:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      64:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      68:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>
      6c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__bad_interrupt>

00000070 <pwmtable>:
	...
      80:	01 00 01 00 01 00 01 00 01 00 01 00 02 00 02 00     ................
      90:	02 00 03 00 03 00 03 00 04 00 04 00 05 00 05 00     ................
      a0:	06 00 06 00 07 00 07 00 08 00 09 00 09 00 0a 00     ................
      b0:	0b 00 0b 00 0c 00 0d 00 0e 00 0f 00 10 00 10 00     ................
      c0:	11 00 12 00 13 00 14 00 15 00 17 00 18 00 19 00     ................
      d0:	1a 00 1b 00 1c 00 1e 00 1f 00 20 00 22 00 23 00     .......... .".#.
      e0:	24 00 26 00 27 00 29 00 2a 00 2c 00 2e 00 2f 00     $.&.'.).*.,.../.
      f0:	31 00 33 00 34 00 36 00 38 00 3a 00 3c 00 3d 00     1.3.4.6.8.:.<.=.
     100:	3f 00 41 00 43 00 45 00 47 00 49 00 4c 00 4e 00     ?.A.C.E.G.I.L.N.
     110:	50 00 52 00 54 00 57 00 59 00 5b 00 5e 00 60 00     P.R.T.W.Y.[.^.`.
     120:	63 00 65 00 68 00 6a 00 6d 00 6f 00 72 00 75 00     c.e.h.j.m.o.r.u.
     130:	77 00 7a 00 7d 00 80 00 83 00 85 00 88 00 8b 00     w.z.}...........
     140:	8e 00 91 00 94 00 98 00 9b 00 9e 00 a1 00 a4 00     ................
     150:	a8 00 ab 00 ae 00 b2 00 b5 00 b8 00 bc 00 bf 00     ................
     160:	c3 00 c7 00 ca 00 ce 00 d2 00 d5 00 d9 00 dd 00     ................
     170:	e1 00 e5 00 e9 00 ed 00 f1 00 f5 00 f9 00 fd 00     ................
     180:	01 01 05 01 09 01 0d 01 12 01 16 01 1a 01 1f 01     ................
     190:	23 01 28 01 2c 01 31 01 35 01 3a 01 3f 01 43 01     #.(.,.1.5.:.?.C.
     1a0:	48 01 4d 01 52 01 56 01 5b 01 60 01 65 01 6a 01     H.M.R.V.[.`.e.j.
     1b0:	6f 01 74 01 79 01 7f 01 84 01 89 01 8e 01 94 01     o.t.y...........
     1c0:	99 01 9e 01 a4 01 a9 01 af 01 b4 01 ba 01 bf 01     ................
     1d0:	c5 01 cb 01 d0 01 d6 01 dc 01 e2 01 e8 01 ee 01     ................
     1e0:	f3 01 f9 01 ff 01 06 02 0c 02 12 02 18 02 1e 02     ................
     1f0:	24 02 2b 02 31 02 38 02 3e 02 44 02 4b 02 51 02     $.+.1.8.>.D.K.Q.
     200:	58 02 5f 02 65 02 6c 02 73 02 7a 02 80 02 87 02     X._.e.l.s.z.....
     210:	8e 02 95 02 9c 02 a3 02 aa 02 b1 02 b8 02 c0 02     ................
     220:	c7 02 ce 02 d5 02 dd 02 e4 02 eb 02 f3 02 fa 02     ................
     230:	02 03 0a 03 11 03 19 03 21 03 28 03 30 03 38 03     ........!.(.0.8.
     240:	40 03 48 03 50 03 58 03 60 03 68 03 70 03 78 03     @.H.P.X.`.h.p.x.
     250:	80 03 88 03 91 03 99 03 a1 03 aa 03 b2 03 bb 03     ................
     260:	c3 03 cc 03 d4 03 dd 03 e6 03 ee 03 f7 03 00 04     ................

00000270 <__ctors_end>:
     270:	11 24       	eor	r1, r1
     272:	1f be       	out	0x3f, r1	; 63
     274:	cf ef       	ldi	r28, 0xFF	; 255
     276:	d4 e0       	ldi	r29, 0x04	; 4
     278:	de bf       	out	0x3e, r29	; 62
     27a:	cd bf       	out	0x3d, r28	; 61

0000027c <__do_copy_data>:
     27c:	11 e0       	ldi	r17, 0x01	; 1
     27e:	a0 e0       	ldi	r26, 0x00	; 0
     280:	b1 e0       	ldi	r27, 0x01	; 1
     282:	ea ec       	ldi	r30, 0xCA	; 202
     284:	f9 e1       	ldi	r31, 0x19	; 25
     286:	02 c0       	rjmp	.+4      	; 0x28c <.do_copy_data_start>

00000288 <.do_copy_data_loop>:
     288:	05 90       	lpm	r0, Z+
     28a:	0d 92       	st	X+, r0

0000028c <.do_copy_data_start>:
     28c:	a4 31       	cpi	r26, 0x14	; 20
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <.do_copy_data_loop>

00000292 <__do_clear_bss>:
     292:	12 e0       	ldi	r17, 0x02	; 2
     294:	a4 e1       	ldi	r26, 0x14	; 20
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a1 32       	cpi	r26, 0x21	; 33
     29e:	b1 07       	cpc	r27, r17
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 a4 01 	call	0x348	; 0x348 <main>
     2a6:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <_exit>

000002aa <__bad_interrupt>:
     2aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ae <command>:
}	
		


void command(uint8_t *buf)
{
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	df 93       	push	r29
     2b4:	cf 93       	push	r28
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	27 97       	sbiw	r28, 0x07	; 7
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	fc 01       	movw	r30, r24
		
	uint8_t m_comand = buf[0];
	struct rgb rgb_color;
	struct hsv hsv_color;
		
	switch (m_comand) {
     2c8:	80 81       	ld	r24, Z
     2ca:	82 30       	cpi	r24, 0x02	; 2
     2cc:	91 f0       	breq	.+36     	; 0x2f2 <command+0x44>
     2ce:	83 30       	cpi	r24, 0x03	; 3
     2d0:	28 f4       	brcc	.+10     	; 0x2dc <command+0x2e>
     2d2:	88 23       	and	r24, r24
     2d4:	59 f0       	breq	.+22     	; 0x2ec <command+0x3e>
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	61 f5       	brne	.+88     	; 0x332 <command+0x84>
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <command+0x38>
     2dc:	83 30       	cpi	r24, 0x03	; 3
     2de:	91 f0       	breq	.+36     	; 0x304 <command+0x56>
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	39 f5       	brne	.+78     	; 0x332 <command+0x84>
     2e4:	23 c0       	rjmp	.+70     	; 0x32c <command+0x7e>
		case mpxl_cmd_off:
			led_off();
     2e6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <led_off>
     2ea:	23 c0       	rjmp	.+70     	; 0x332 <command+0x84>
			break;
				
		case mpxl_cmd_on:
			led_on();
     2ec:	0e 94 e5 05 	call	0xbca	; 0xbca <led_on>
     2f0:	20 c0       	rjmp	.+64     	; 0x332 <command+0x84>
			break;
				
		case mpxl_cmd_setRGB:
			rgb_color.Red = buf[1];
     2f2:	81 81       	ldd	r24, Z+1	; 0x01
     2f4:	89 83       	std	Y+1, r24	; 0x01
			rgb_color.Green = buf[2];
     2f6:	82 81       	ldd	r24, Z+2	; 0x02
     2f8:	8a 83       	std	Y+2, r24	; 0x02
			rgb_color.Blue = buf[3];
     2fa:	83 81       	ldd	r24, Z+3	; 0x03
     2fc:	8b 83       	std	Y+3, r24	; 0x03
			set_led_color(&rgb_color);
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	11 c0       	rjmp	.+34     	; 0x326 <command+0x78>
			break;
			
		case mpxl_cmd_setHSV:
			hsv_color.hsv[0] = buf[1];
     304:	81 81       	ldd	r24, Z+1	; 0x01
     306:	8c 83       	std	Y+4, r24	; 0x04
			hsv_color.hsv[1] = buf[2];
     308:	82 81       	ldd	r24, Z+2	; 0x02
     30a:	8d 83       	std	Y+5, r24	; 0x05
			hsv_color.saturation = buf[3];
     30c:	83 81       	ldd	r24, Z+3	; 0x03
     30e:	8e 83       	std	Y+6, r24	; 0x06
			hsv_color.value = buf[4];
     310:	84 81       	ldd	r24, Z+4	; 0x04
     312:	8f 83       	std	Y+7, r24	; 0x07
			hsv2rgb(&hsv_color,&rgb_color);
     314:	ce 01       	movw	r24, r28
     316:	04 96       	adiw	r24, 0x04	; 4
     318:	8e 01       	movw	r16, r28
     31a:	0f 5f       	subi	r16, 0xFF	; 255
     31c:	1f 4f       	sbci	r17, 0xFF	; 255
     31e:	b8 01       	movw	r22, r16
     320:	0e 94 21 06 	call	0xc42	; 0xc42 <hsv2rgb>
			set_led_color(&rgb_color);
     324:	c8 01       	movw	r24, r16
     326:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
     32a:	03 c0       	rjmp	.+6      	; 0x332 <command+0x84>
			break;
			
		case mpxl_cmd_script:
			script_handler(buf);
     32c:	cf 01       	movw	r24, r30
     32e:	0e 94 05 0b 	call	0x160a	; 0x160a <script_handler>
			break;
	}		
     332:	27 96       	adiw	r28, 0x07	; 7
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <main>:
		
	
}

int main(void)
{
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	2a 97       	sbiw	r28, 0x0a	; 10
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
	//Initialisieren
	uart1_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );  //Uart 1 initialisieren (Debug)
     364:	80 e1       	ldi	r24, 0x10	; 16
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 2a 05 	call	0xa54	; 0xa54 <uart1_init>
	led_init();		//LED Initialisieren
     36c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <led_init>
	td_init();		//Zeitbasis initialisieren
     370:	0e 94 8e 0a 	call	0x151c	; 0x151c <td_init>
	script_init();
     374:	0e 94 27 0c 	call	0x184e	; 0x184e <script_init>
	
	//Funkmodul initialisieren
	rf12_init();					// ein paar Register setzen (z.B. CLK auf 10MHz)
     378:	0e 94 8b 02 	call	0x516	; 0x516 <rf12_init>
	rf12_setfreq(RF12FREQ(433.25));	// Sende/Empfangsfrequenz auf 433,92MHz einstellen
     37c:	84 e1       	ldi	r24, 0x14	; 20
     37e:	95 e0       	ldi	r25, 0x05	; 5
     380:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <rf12_setfreq>
	rf12_setbandwidth(4, 1, 4);		// 200kHz Bandbreite, -6dB Verstärkung, DRSSI threshold: -79dBm 
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	44 e0       	ldi	r20, 0x04	; 4
     38a:	0e 94 c9 02 	call	0x592	; 0x592 <rf12_setbandwidth>
	rf12_setbaud(19200);			// 19200 baud
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	9b e4       	ldi	r25, 0x4B	; 75
     392:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <rf12_setbaud>
	rf12_setpower(0, 6);			// 1mW Ausgangangsleistung, 120kHz Frequenzshift
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	66 e0       	ldi	r22, 0x06	; 6
     39a:	0e 94 14 03 	call	0x628	; 0x628 <rf12_setpower>

	sei();		//Interrupts aktivieren
     39e:	78 94       	sei

	set_fanspeed(1024);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	94 e0       	ldi	r25, 0x04	; 4
     3a4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <set_fanspeed>
	
	uint8_t buf_temp[10];
	uint16_t temp = 0;
	
	buf_temp[0] = mpxl_cmd_script;
     3a8:	94 e0       	ldi	r25, 0x04	; 4
     3aa:	e9 2e       	mov	r14, r25
     3ac:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_init;
     3ae:	1a 82       	std	Y+2, r1	; 0x02
	command(buf_temp);
     3b0:	8e 01       	movw	r16, r28
     3b2:	0f 5f       	subi	r16, 0xFF	; 255
     3b4:	1f 4f       	sbci	r17, 0xFF	; 255
     3b6:	c8 01       	movw	r24, r16
     3b8:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>
	
	buf_temp[0] = mpxl_cmd_script;
     3bc:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_on;
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	8a 83       	std	Y+2, r24	; 0x02
	command(buf_temp);
     3c2:	c8 01       	movw	r24, r16
     3c4:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>

	buf_temp[0] = mpxl_cmd_script;
     3c8:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_set;
     3ca:	ea 82       	std	Y+2, r14	; 0x02
	buf_temp[2] = 0xff;
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	8b 83       	std	Y+3, r24	; 0x03
	buf_temp[3] = 0x00;
     3d0:	1c 82       	std	Y+4, r1	; 0x04
	buf_temp[4] = 0x00;
     3d2:	1d 82       	std	Y+5, r1	; 0x05
	command(buf_temp);
     3d4:	c8 01       	movw	r24, r16
     3d6:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>

	buf_temp[0] = mpxl_cmd_script;
     3da:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_wait;
     3dc:	85 e0       	ldi	r24, 0x05	; 5
     3de:	f8 2e       	mov	r15, r24
     3e0:	fa 82       	std	Y+2, r15	; 0x02
	buf_temp[2] = 0x05; 
     3e2:	fb 82       	std	Y+3, r15	; 0x03
	command(buf_temp);
     3e4:	c8 01       	movw	r24, r16
     3e6:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>
	
	buf_temp[0] = mpxl_cmd_script;
     3ea:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_fade;
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	8a 83       	std	Y+2, r24	; 0x02
	buf_temp[2] = 0x00;
     3f0:	1b 82       	std	Y+3, r1	; 0x03
	buf_temp[3] = 0xf0;
     3f2:	80 ef       	ldi	r24, 0xF0	; 240
     3f4:	8c 83       	std	Y+4, r24	; 0x04
	buf_temp[4] = 0x20;
     3f6:	80 e2       	ldi	r24, 0x20	; 32
     3f8:	8d 83       	std	Y+5, r24	; 0x05
	buf_temp[5] = 0x05;
     3fa:	fe 82       	std	Y+6, r15	; 0x06
	command(buf_temp);
     3fc:	c8 01       	movw	r24, r16
     3fe:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>

	buf_temp[0] = mpxl_cmd_script;
     402:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_wait;
     404:	fa 82       	std	Y+2, r15	; 0x02
	buf_temp[2] = 0x05; 
     406:	fb 82       	std	Y+3, r15	; 0x03
	command(buf_temp);
     408:	c8 01       	movw	r24, r16
     40a:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>

	buf_temp[0] = mpxl_cmd_script;
     40e:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_off;
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	8a 83       	std	Y+2, r24	; 0x02
	command(buf_temp);
     414:	c8 01       	movw	r24, r16
     416:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>


	buf_temp[0] = mpxl_cmd_script;
     41a:	e9 82       	std	Y+1, r14	; 0x01
	buf_temp[1] = scrcmd_exec;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	8a 83       	std	Y+2, r24	; 0x02
	command(buf_temp);
     420:	c8 01       	movw	r24, r16
     422:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>
	{
		//Wenn Zeichen empfangen wurden, wird der fertiggelesene 
		//Emofangspuffer an die Command-Funktion übergeben
		if (rf12_getStatus() == rf12_data_status_ready)
		{
			rf12_getData(buf_temp); 
     426:	f0 2e       	mov	r15, r16
     428:	01 2f       	mov	r16, r17
	//Mainloop
	while(23)
	{
		//Wenn Zeichen empfangen wurden, wird der fertiggelesene 
		//Emofangspuffer an die Command-Funktion übergeben
		if (rf12_getStatus() == rf12_data_status_ready)
     42a:	0e 94 23 04 	call	0x846	; 0x846 <rf12_getStatus>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	51 f4       	brne	.+20     	; 0x446 <main+0xfe>
		{
			rf12_getData(buf_temp); 
     432:	8f 2d       	mov	r24, r15
     434:	90 2f       	mov	r25, r16
     436:	0e 94 26 04 	call	0x84c	; 0x84c <rf12_getData>
			rf_data_reset();
     43a:	0e 94 0e 04 	call	0x81c	; 0x81c <rf_data_reset>
			command(buf_temp);
     43e:	8f 2d       	mov	r24, r15
     440:	90 2f       	mov	r25, r16
     442:	0e 94 57 01 	call	0x2ae	; 0x2ae <command>
		}
		
		script_tick();
     446:	0e 94 93 0b 	call	0x1726	; 0x1726 <script_tick>
		rgb_fade_tick();
     44a:	0e 94 30 07 	call	0xe60	; 0xe60 <rgb_fade_tick>
     44e:	ed cf       	rjmp	.-38     	; 0x42a <main+0xe2>

00000450 <adjust_fanspeed>:
void command(uint8_t *buf);



void adjust_fanspeed()
{
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	df 93       	push	r29
     45a:	cf 93       	push	r28
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	2a 97       	sbiw	r28, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
	const uint16_t fansteps[6] = {900, 700, 500, 300, 100, 50};
	start_meas();
     46c:	0e 94 c7 09 	call	0x138e	; 0x138e <start_meas>
	uint16_t temp = read_meas();
     470:	0e 94 86 09 	call	0x130c	; 0x130c <read_meas>
     474:	7c 01       	movw	r14, r24
		



	char buffer[10];
	itoa( Hight, buffer, 10);
     476:	24 e0       	ldi	r18, 0x04	; 4
     478:	96 95       	lsr	r25
     47a:	87 95       	ror	r24
     47c:	2a 95       	dec	r18
     47e:	e1 f7       	brne	.-8      	; 0x478 <adjust_fanspeed+0x28>
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	8e 01       	movw	r16, r28
     484:	0f 5f       	subi	r16, 0xFF	; 255
     486:	1f 4f       	sbci	r17, 0xFF	; 255
     488:	b8 01       	movw	r22, r16
     48a:	4a e0       	ldi	r20, 0x0A	; 10
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <itoa>
	uart1_puts(buffer);
     492:	c8 01       	movw	r24, r16
     494:	0e 94 6e 05 	call	0xadc	; 0xadc <uart1_puts>
	uart1_puts(".");
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 6e 05 	call	0xadc	; 0xadc <uart1_puts>
	itoa( Lowt, buffer,10);
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	9e 2d       	mov	r25, r14
     4a4:	92 95       	swap	r25
     4a6:	90 7f       	andi	r25, 0xF0	; 240
     4a8:	69 e9       	ldi	r22, 0x99	; 153
     4aa:	79 e1       	ldi	r23, 0x19	; 25
     4ac:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     4b0:	86 2f       	mov	r24, r22
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	b8 01       	movw	r22, r16
     4b6:	4a e0       	ldi	r20, 0x0A	; 10
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	0e 94 a9 0c 	call	0x1952	; 0x1952 <itoa>
	uart1_puts(buffer);
     4be:	c8 01       	movw	r24, r16
     4c0:	0e 94 6e 05 	call	0xadc	; 0xadc <uart1_puts>

		
	
}
     4c4:	2a 96       	adiw	r28, 0x0a	; 10
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	cf 91       	pop	r28
     4d2:	df 91       	pop	r29
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <rf12_trans>:
unsigned short rf12_trans(unsigned short wert)
{	
	unsigned short werti=0;
	unsigned char i;

	cbi(RF_PORT, CS);
     4de:	c0 98       	cbi	0x18, 0	; 24
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4e6:	61 e0       	ldi	r22, 0x01	; 1
	for (i=0; i<16; i++)
	{	if (wert&32768)
     4e8:	97 ff       	sbrs	r25, 7
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <rf12_trans+0x12>
			sbi(RF_PORT, SDI);
     4ec:	c5 9a       	sbi	0x18, 5	; 24
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <rf12_trans+0x14>
		else
			cbi(RF_PORT, SDI);
     4f0:	c5 98       	cbi	0x18, 5	; 24
		werti<<=1;
     4f2:	22 0f       	add	r18, r18
     4f4:	33 1f       	adc	r19, r19
		if (RF_PIN&(1<<SDO))
     4f6:	b6 99       	sbic	0x16, 6	; 22
			werti|=1;
     4f8:	21 60       	ori	r18, 0x01	; 1
		sbi(RF_PORT, SCK);
     4fa:	c7 9a       	sbi	0x18, 7	; 24
     4fc:	46 2f       	mov	r20, r22
     4fe:	4a 95       	dec	r20
     500:	f1 f7       	brne	.-4      	; 0x4fe <rf12_trans+0x20>
		wert<<=1;
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
     502:	c7 98       	cbi	0x18, 7	; 24
{	
	unsigned short werti=0;
	unsigned char i;

	cbi(RF_PORT, CS);
	for (i=0; i<16; i++)
     504:	5f 5f       	subi	r21, 0xFF	; 255
     506:	50 31       	cpi	r21, 0x10	; 16
     508:	19 f0       	breq	.+6      	; 0x510 <__stack+0x11>
			cbi(RF_PORT, SDI);
		werti<<=1;
		if (RF_PIN&(1<<SDO))
			werti|=1;
		sbi(RF_PORT, SCK);
		wert<<=1;
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	ec cf       	rjmp	.-40     	; 0x4e8 <rf12_trans+0xa>
		_delay_us(0.3);
		cbi(RF_PORT, SCK);
	}
	sbi(RF_PORT, CS);
     510:	c0 9a       	sbi	0x18, 0	; 24
	return werti;
}
     512:	c9 01       	movw	r24, r18
     514:	08 95       	ret

00000516 <rf12_init>:



void rf12_init(void)
{
	RF_DDR=(1<<SDI)|(1<<SCK)|(1<<CS);
     516:	81 ea       	ldi	r24, 0xA1	; 161
     518:	87 bb       	out	0x17, r24	; 23
	RF_PORT=(1<<CS);
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	88 bb       	out	0x18, r24	; 24
     51e:	88 ee       	ldi	r24, 0xE8	; 232
     520:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     522:	20 e9       	ldi	r18, 0x90	; 144
     524:	31 e0       	ldi	r19, 0x01	; 1
     526:	f9 01       	movw	r30, r18
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <rf12_init+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     52e:	d9 f7       	brne	.-10     	; 0x526 <rf12_init+0x10>
	
     _delay_ms(100);			// wait until POR done

	rf12_trans(0xC0E0);			// AVR CLK: 10MHz
     530:	80 ee       	ldi	r24, 0xE0	; 224
     532:	90 ec       	ldi	r25, 0xC0	; 192
     534:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x80D7);			// Enable FIFO
     538:	87 ed       	ldi	r24, 0xD7	; 215
     53a:	90 e8       	ldi	r25, 0x80	; 128
     53c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xC2AB);			// Data Filter: internal
     540:	8b ea       	ldi	r24, 0xAB	; 171
     542:	92 ec       	ldi	r25, 0xC2	; 194
     544:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xCA81);			// Set FIFO mode
     548:	81 e8       	ldi	r24, 0x81	; 129
     54a:	9a ec       	ldi	r25, 0xCA	; 202
     54c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xE000);			// disable wakeuptimer
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 ee       	ldi	r25, 0xE0	; 224
     554:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xC800);			// disable low duty cycle
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	98 ec       	ldi	r25, 0xC8	; 200
     55c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xC4F7);			// AFC settings: autotuning: -10kHz...+7,5kHz
     560:	87 ef       	ldi	r24, 0xF7	; 247
     562:	94 ec       	ldi	r25, 0xC4	; 196
     564:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>

	//Einschalten des Receivers	
	rf12_trans(0x82C8);			// RX on
     568:	88 ec       	ldi	r24, 0xC8	; 200
     56a:	92 e8       	ldi	r25, 0x82	; 130
     56c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xCA83);			// enable FIFO         
     570:	83 e8       	ldi	r24, 0x83	; 131
     572:	9a ec       	ldi	r25, 0xCA	; 202
     574:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x0000);			//Status lesen
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	
	strRX.Status = 0;
     580:	10 92 0f 02 	sts	0x020F, r1
	
	//Interrupt 
	MCUCR |= (1 << ISC11);	//Trigger auf fallende Flanke
     584:	85 b7       	in	r24, 0x35	; 53
     586:	88 60       	ori	r24, 0x08	; 8
     588:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);	//Int aktivieren
     58a:	8b b7       	in	r24, 0x3b	; 59
     58c:	80 68       	ori	r24, 0x80	; 128
     58e:	8b bf       	out	0x3b, r24	; 59
	
}
     590:	08 95       	ret

00000592 <rf12_setbandwidth>:

void rf12_setbandwidth(unsigned char bandwidth, unsigned char gain, unsigned char drssi)
{
	rf12_trans(0x9400|((bandwidth&7)<<5)|((gain&3)<<3)|(drssi&7));
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	f5 e0       	ldi	r31, 0x05	; 5
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	fa 95       	dec	r31
     59c:	e1 f7       	brne	.-8      	; 0x596 <rf12_setbandwidth+0x4>
     59e:	90 70       	andi	r25, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	47 70       	andi	r20, 0x07	; 7
     5a4:	50 70       	andi	r21, 0x00	; 0
     5a6:	84 2b       	or	r24, r20
     5a8:	95 2b       	or	r25, r21
     5aa:	94 69       	ori	r25, 0x94	; 148
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	63 70       	andi	r22, 0x03	; 3
     5b0:	70 70       	andi	r23, 0x00	; 0
     5b2:	e3 e0       	ldi	r30, 0x03	; 3
     5b4:	66 0f       	add	r22, r22
     5b6:	77 1f       	adc	r23, r23
     5b8:	ea 95       	dec	r30
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <rf12_setbandwidth+0x22>
     5bc:	86 2b       	or	r24, r22
     5be:	97 2b       	or	r25, r23
     5c0:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
}
     5c4:	08 95       	ret

000005c6 <rf12_setfreq>:

void rf12_setfreq(unsigned short freq)
{	if (freq<96)				// 430,2400MHz
     5c6:	80 36       	cpi	r24, 0x60	; 96
     5c8:	91 05       	cpc	r25, r1
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <rf12_setfreq+0xc>
     5cc:	80 e6       	ldi	r24, 0x60	; 96
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	06 c0       	rjmp	.+12     	; 0x5de <rf12_setfreq+0x18>
     5d2:	2f e0       	ldi	r18, 0x0F	; 15
     5d4:	80 34       	cpi	r24, 0x40	; 64
     5d6:	92 07       	cpc	r25, r18
     5d8:	10 f0       	brcs	.+4      	; 0x5de <rf12_setfreq+0x18>
     5da:	8f e3       	ldi	r24, 0x3F	; 63
     5dc:	9f e0       	ldi	r25, 0x0F	; 15
		freq=96;
	else if (freq>3903)			// 439,7575MHz
		freq=3903;
	rf12_trans(0xA000|freq);
     5de:	90 6a       	ori	r25, 0xA0	; 160
     5e0:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
}
     5e4:	08 95       	ret

000005e6 <rf12_setbaud>:

void rf12_setbaud(unsigned short baud)
{
	if (baud<663)
     5e6:	22 e0       	ldi	r18, 0x02	; 2
     5e8:	87 39       	cpi	r24, 0x97	; 151
     5ea:	92 07       	cpc	r25, r18
     5ec:	e0 f0       	brcs	.+56     	; 0x626 <rf12_setbaud+0x40>
		return;
	if (baud<5400)					// Baudrate= 344827,58621/(R+1)/(1+CS*7)
     5ee:	25 e1       	ldi	r18, 0x15	; 21
     5f0:	88 31       	cpi	r24, 0x18	; 24
     5f2:	92 07       	cpc	r25, r18
     5f4:	88 f4       	brcc	.+34     	; 0x618 <rf12_setbaud+0x32>
		rf12_trans(0xC680|((43104/baud)-1));
     5f6:	9c 01       	movw	r18, r24
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e6       	ldi	r22, 0x60	; 96
     5fe:	78 ea       	ldi	r23, 0xA8	; 168
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__divmodsi4>
     608:	da 01       	movw	r26, r20
     60a:	c9 01       	movw	r24, r18
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	80 68       	ori	r24, 0x80	; 128
     610:	96 6c       	ori	r25, 0xC6	; 198
     612:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     616:	08 95       	ret
	
	if (baud==19200)
     618:	80 50       	subi	r24, 0x00	; 0
     61a:	9b 44       	sbci	r25, 0x4B	; 75
     61c:	21 f4       	brne	.+8      	; 0x626 <rf12_setbaud+0x40>
     	rf12_trans(0xC611);
     61e:	81 e1       	ldi	r24, 0x11	; 17
     620:	96 ec       	ldi	r25, 0xC6	; 198
     622:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     626:	08 95       	ret

00000628 <rf12_setpower>:
	
}

void rf12_setpower(unsigned char power, unsigned char mod)
{	
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	87 70       	andi	r24, 0x07	; 7
     62c:	90 70       	andi	r25, 0x00	; 0
     62e:	98 69       	ori	r25, 0x98	; 152
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	a4 e0       	ldi	r26, 0x04	; 4
     634:	66 0f       	add	r22, r22
     636:	77 1f       	adc	r23, r23
     638:	aa 95       	dec	r26
     63a:	e1 f7       	brne	.-8      	; 0x634 <rf12_setpower+0xc>
     63c:	70 70       	andi	r23, 0x00	; 0
     63e:	86 2b       	or	r24, r22
     640:	97 2b       	or	r25, r23
     642:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
}
     646:	08 95       	ret

00000648 <rf12_ready>:

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     648:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     64a:	b6 9b       	sbis	0x16, 6	; 22
     64c:	fe cf       	rjmp	.-4      	; 0x64a <rf12_ready+0x2>
}
     64e:	08 95       	ret

00000650 <rf12_txdata>:

void rf12_txdata(unsigned char *data, unsigned char number)
{	
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	8c 01       	movw	r16, r24
     65c:	f6 2e       	mov	r15, r22
	unsigned char i;
	rf12_trans(0x8238);			// TX on
     65e:	88 e3       	ldi	r24, 0x38	; 56
     660:	92 e8       	ldi	r25, 0x82	; 130
     662:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     666:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     668:	b6 9b       	sbis	0x16, 6	; 22
     66a:	fe cf       	rjmp	.-4      	; 0x668 <rf12_txdata+0x18>
void rf12_txdata(unsigned char *data, unsigned char number)
{	
	unsigned char i;
	rf12_trans(0x8238);			// TX on
	rf12_ready();
	rf12_trans(0xB8AA);
     66c:	8a ea       	ldi	r24, 0xAA	; 170
     66e:	98 eb       	ldi	r25, 0xB8	; 184
     670:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     674:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     676:	b6 9b       	sbis	0x16, 6	; 22
     678:	fe cf       	rjmp	.-4      	; 0x676 <rf12_txdata+0x26>
	unsigned char i;
	rf12_trans(0x8238);			// TX on
	rf12_ready();
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB8AA);
     67a:	8a ea       	ldi	r24, 0xAA	; 170
     67c:	98 eb       	ldi	r25, 0xB8	; 184
     67e:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     682:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     684:	b6 9b       	sbis	0x16, 6	; 22
     686:	fe cf       	rjmp	.-4      	; 0x684 <rf12_txdata+0x34>
	rf12_ready();
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB8AA);
     688:	8a ea       	ldi	r24, 0xAA	; 170
     68a:	98 eb       	ldi	r25, 0xB8	; 184
     68c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     690:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     692:	b6 9b       	sbis	0x16, 6	; 22
     694:	fe cf       	rjmp	.-4      	; 0x692 <rf12_txdata+0x42>
	rf12_ready();
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB82D);
     696:	8d e2       	ldi	r24, 0x2D	; 45
     698:	98 eb       	ldi	r25, 0xB8	; 184
     69a:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     69e:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     6a0:	b6 9b       	sbis	0x16, 6	; 22
     6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <rf12_txdata+0x50>
	rf12_ready();
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB82D);
	rf12_ready();
	rf12_trans(0xB8D4);
     6a4:	84 ed       	ldi	r24, 0xD4	; 212
     6a6:	98 eb       	ldi	r25, 0xB8	; 184
     6a8:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     6ac:	e8 01       	movw	r28, r16
     6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <rf12_txdata+0x70>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     6b0:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     6b2:	b6 9b       	sbis	0x16, 6	; 22
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <rf12_txdata+0x62>
	rf12_trans(0xB82D);
	rf12_ready();
	rf12_trans(0xB8D4);
	for (i=0; i<number; i++)
	{		rf12_ready();
		rf12_trans(0xB800|(*data++));
     6b6:	89 91       	ld	r24, Y+
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	98 6b       	ori	r25, 0xB8	; 184
     6bc:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
	rf12_trans(0xB8AA);
	rf12_ready();
	rf12_trans(0xB82D);
	rf12_ready();
	rf12_trans(0xB8D4);
	for (i=0; i<number; i++)
     6c0:	9e 01       	movw	r18, r28
     6c2:	20 1b       	sub	r18, r16
     6c4:	2f 15       	cp	r18, r15
     6c6:	a0 f3       	brcs	.-24     	; 0x6b0 <rf12_txdata+0x60>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     6c8:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     6ca:	b6 9b       	sbis	0x16, 6	; 22
     6cc:	fe cf       	rjmp	.-4      	; 0x6ca <rf12_txdata+0x7a>
	for (i=0; i<number; i++)
	{		rf12_ready();
		rf12_trans(0xB800|(*data++));
	}
	rf12_ready();
	rf12_trans(0x8208);			// TX off
     6ce:	88 e0       	ldi	r24, 0x08	; 8
     6d0:	92 e8       	ldi	r25, 0x82	; 130
     6d2:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	08 95       	ret

000006e2 <__vector_2>:

/*
Hier werden die Interrupts des Funkmoduls behandelt. 
*/
ISR(INT1_vect)
{
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	2f 93       	push	r18
     6ee:	3f 93       	push	r19
     6f0:	4f 93       	push	r20
     6f2:	5f 93       	push	r21
     6f4:	6f 93       	push	r22
     6f6:	7f 93       	push	r23
     6f8:	8f 93       	push	r24
     6fa:	9f 93       	push	r25
     6fc:	af 93       	push	r26
     6fe:	bf 93       	push	r27
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	ef 93       	push	r30
     706:	ff 93       	push	r31
	Uns interessiert also das Highbyte genauer das höchstwertige Bit des Highbyte.
	*/
		
	
	// Wenn das "Daten im FiFo"-Flag gesetzt ist, wird empfangen.
	uint8_t temp = (rf12_trans(0x0000)>>8);
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
  	if (temp & (1 << 7)) //FFIT Interrupt wurde ausgeloest.
     710:	97 ff       	sbrs	r25, 7
     712:	71 c0       	rjmp	.+226    	; 0x7f6 <__vector_2+0x114>
    	nx Daten ...
    	1x Datacheck
		*/
		
		//Datenempfang läuft
  		if(strRX.Status == rf12_data_status_progress)
     714:	80 91 0f 02 	lds	r24, 0x020F
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	09 f0       	breq	.+2      	; 0x71e <__vector_2+0x3c>
     71c:	56 c0       	rjmp	.+172    	; 0x7ca <__vector_2+0xe8>
  		{
  			//Übertragung abgeschlossen, wenn die Länge - das Längenbit
  			//sebst erreicht ist.
  			if (strRX.Count == (strRX.Length + 1))
     71e:	20 91 11 02 	lds	r18, 0x0211
     722:	80 91 10 02 	lds	r24, 0x0210
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	91 f4       	brne	.+36     	; 0x756 <__vector_2+0x74>
  			{
  				strRX.Status = rf12_data_status_ready;
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	80 93 0f 02 	sts	0x020F, r24
				strRX.Data[strRX.Count - 3] = '\0'; //Ende
     738:	e0 91 11 02 	lds	r30, 0x0211
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e4 5f       	subi	r30, 0xF4	; 244
     740:	fd 4f       	sbci	r31, 0xFD	; 253
     742:	14 82       	std	Z+4, r1	; 0x04
				/*
				Checksumme über die Daten prüfen
				*/
				
				//FIFO Reset
				rf12_trans(0xCA81);
     744:	81 e8       	ldi	r24, 0x81	; 129
     746:	9a ec       	ldi	r25, 0xCA	; 202
     748:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
				rf12_trans(0xCA83);
     74c:	83 e8       	ldi	r24, 0x83	; 131
     74e:	9a ec       	ldi	r25, 0xCA	; 202
     750:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     754:	4f c0       	rjmp	.+158    	; 0x7f4 <__vector_2+0x112>
				
				goto END;
  			}

  			if (strRX.Count > 2)
     756:	80 91 11 02 	lds	r24, 0x0211
     75a:	83 30       	cpi	r24, 0x03	; 3
     75c:	a0 f0       	brcs	.+40     	; 0x786 <__vector_2+0xa4>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     75e:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     760:	b6 9b       	sbis	0x16, 6	; 22
     762:	fe cf       	rjmp	.-4      	; 0x760 <__vector_2+0x7e>
  			}

  			if (strRX.Count > 2)
  			{
  				rf12_ready();
  				strRX.Data[strRX.Count - 3] = rf12_trans(0xB000);
     764:	80 91 11 02 	lds	r24, 0x0211
     768:	c8 2f       	mov	r28, r24
     76a:	d0 e0       	ldi	r29, 0x00	; 0
     76c:	23 97       	sbiw	r28, 0x03	; 3
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 eb       	ldi	r25, 0xB0	; 176
     772:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     776:	c1 5f       	subi	r28, 0xF1	; 241
     778:	dd 4f       	sbci	r29, 0xFD	; 253
     77a:	8c 83       	std	Y+4, r24	; 0x04
  				strRX.Count++;
     77c:	80 91 11 02 	lds	r24, 0x0211
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 93 11 02 	sts	0x0211, r24
  				//uart1_putc(strRX.Data[strRX.Count - 4]);
  			}

  			//Header Check
  			if (strRX.Count == 2)
     786:	80 91 11 02 	lds	r24, 0x0211
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	61 f4       	brne	.+24     	; 0x7a6 <__vector_2+0xc4>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     78e:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     790:	b6 9b       	sbis	0x16, 6	; 22
     792:	fe cf       	rjmp	.-4      	; 0x790 <__vector_2+0xae>

  			//Header Check
  			if (strRX.Count == 2)
  			{
  				rf12_ready();
  				uint8_t Checksumme = rf12_trans(0xB000);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 eb       	ldi	r25, 0xB0	; 176
     798:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
				/*
				Check IO?
				*/
				strRX.Count++;
     79c:	80 91 11 02 	lds	r24, 0x0211
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 11 02 	sts	0x0211, r24
  			}
			
			//Adressbyte lesen
  			if (strRX.Count == 1)
     7a6:	80 91 11 02 	lds	r24, 0x0211
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	71 f4       	brne	.+28     	; 0x7ca <__vector_2+0xe8>
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     7ae:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     7b0:	b6 9b       	sbis	0x16, 6	; 22
     7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <__vector_2+0xce>
			
			//Adressbyte lesen
  			if (strRX.Count == 1)
  			{
  				rf12_ready();
				strRX.Adress = rf12_trans(0xB000);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 eb       	ldi	r25, 0xB0	; 176
     7b8:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     7bc:	80 93 12 02 	sts	0x0212, r24
				//uart1_putc(strRX.Adress);
				strRX.Count++;
     7c0:	80 91 11 02 	lds	r24, 0x0211
     7c4:	8f 5f       	subi	r24, 0xFF	; 255
     7c6:	80 93 11 02 	sts	0x0211, r24
  			}
  		}
  		
  		//Empfang beginnt
  		if (strRX.Status == rf12_data_status_empty)
     7ca:	80 91 0f 02 	lds	r24, 0x020F
     7ce:	88 23       	and	r24, r24
     7d0:	89 f4       	brne	.+34     	; 0x7f4 <__vector_2+0x112>
  		{
  			strRX.Status = rf12_data_status_progress;
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	80 93 0f 02 	sts	0x020F, r24
	rf12_trans(0x9800|(power&7)|((mod&15)<<4));
}

void rf12_ready(void)
{	
	cbi(RF_PORT, CS);
     7d8:	c0 98       	cbi	0x18, 0	; 24
	while (!(RF_PIN&(1<<SDO))); // wait until FIFO ready
     7da:	b6 9b       	sbis	0x16, 6	; 22
     7dc:	fe cf       	rjmp	.-4      	; 0x7da <__vector_2+0xf8>
			//Warum funktioniert das?
			//Der Data variable vom typ Char wird der Short zugewiesen, welcher
			//vom Modul empfangen wurde. Da nur die letzten 8 bit die Daten enthalten, wird der 
			//Rest einfach abgeschnitten. Das ist kein Problem.
			//Sicher gige das auch etwas elegenter.
			strRX.Length = rf12_trans(0xB000); 	//Empfang des Längenbytes
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 eb       	ldi	r25, 0xB0	; 176
     7e2:	0e 94 6f 02 	call	0x4de	; 0x4de <rf12_trans>
     7e6:	80 93 10 02 	sts	0x0210, r24
  			//uart1_putc(strRX.Length);
  			strRX.Count++;
     7ea:	80 91 11 02 	lds	r24, 0x0211
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	80 93 11 02 	sts	0x0211, r24
  		}
  		
		END:
		asm volatile ("nop");
     7f4:	00 00       	nop
	}
}
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <rf_data_reset>:
void rf_data_reset()
{
	cli();	//Diese Methode muss atomar behandelt werden. 
     81c:	f8 94       	cli

	strRX.Count = 0;
     81e:	10 92 11 02 	sts	0x0211, r1
	strRX.Length = 0;
     822:	10 92 10 02 	sts	0x0210, r1
	strRX.Adress = 0;
     826:	10 92 12 02 	sts	0x0212, r1
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
	
	//Örks ... wenn das mal nicht ekelhaft ist.
	//Da muss es doch eine bessere Möglichkeit geben ...
	uint8_t i;
	for (i=0; i<20; i++) strRX.Data[i] = 0;
     82e:	fc 01       	movw	r30, r24
     830:	e1 5f       	subi	r30, 0xF1	; 241
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	14 82       	std	Z+4, r1	; 0x04
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	84 31       	cpi	r24, 0x14	; 20
     83a:	91 05       	cpc	r25, r1
     83c:	c1 f7       	brne	.-16     	; 0x82e <rf_data_reset+0x12>
	
	strRX.Status = rf12_data_status_empty;
     83e:	10 92 0f 02 	sts	0x020F, r1
	
	sei();	//Interrupts wieder an
     842:	78 94       	sei
	
}
     844:	08 95       	ret

00000846 <rf12_getStatus>:
	memmove(text, strRX.Data, 10);
}

uint8_t rf12_getStatus()
{
	return strRX.Status;
     846:	80 91 0f 02 	lds	r24, 0x020F
}
     84a:	08 95       	ret

0000084c <rf12_getData>:
	
}

void rf12_getData(uint8_t *text)
{
	memmove(text, strRX.Data, 10);
     84c:	63 e1       	ldi	r22, 0x13	; 19
     84e:	72 e0       	ldi	r23, 0x02	; 2
     850:	4a e0       	ldi	r20, 0x0A	; 10
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	0e 94 97 0c 	call	0x192e	; 0x192e <memmove>
}
     858:	08 95       	ret

0000085a <__vector_19>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     86e:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
     870:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     872:	e0 91 56 01 	lds	r30, 0x0156
     876:	ef 5f       	subi	r30, 0xFF	; 255
     878:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
     87a:	80 91 57 01 	lds	r24, 0x0157
     87e:	e8 17       	cp	r30, r24
     880:	11 f4       	brne	.+4      	; 0x886 <__vector_19+0x2c>
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	08 c0       	rjmp	.+16     	; 0x896 <__vector_19+0x3c>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     886:	89 2f       	mov	r24, r25
     888:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     88a:	e0 93 56 01 	sts	0x0156, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	ec 5c       	subi	r30, 0xCC	; 204
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
     896:	80 93 58 01 	sts	0x0158, r24
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_21>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     8c0:	90 91 54 01 	lds	r25, 0x0154
     8c4:	80 91 55 01 	lds	r24, 0x0155
     8c8:	98 17       	cp	r25, r24
     8ca:	61 f0       	breq	.+24     	; 0x8e4 <__vector_21+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     8cc:	e0 91 55 01 	lds	r30, 0x0155
     8d0:	ef 5f       	subi	r30, 0xFF	; 255
     8d2:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     8d4:	e0 93 55 01 	sts	0x0155, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ec 5e       	subi	r30, 0xEC	; 236
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	80 81       	ld	r24, Z
     8e0:	8c b9       	out	0x0c, r24	; 12
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__vector_21+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     8e4:	55 98       	cbi	0x0a, 5	; 10
    }
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
     8f8:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
     8fa:	10 92 54 01 	sts	0x0154, r1
    UART_TxTail = 0;
     8fe:	10 92 55 01 	sts	0x0155, r1
    UART_RxHead = 0;
     902:	10 92 56 01 	sts	0x0156, r1
    UART_RxTail = 0;
     906:	10 92 57 01 	sts	0x0157, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     90a:	97 ff       	sbrs	r25, 7
     90c:	03 c0       	rjmp	.+6      	; 0x914 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	8b b9       	out	0x0b, r24	; 11
   		baudrate &= ~0x8000;
     912:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     914:	30 bd       	out	0x20, r19	; 32
    UBRR0L = (unsigned char) baudrate;
     916:	29 b9       	out	0x09, r18	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     918:	88 e9       	ldi	r24, 0x98	; 152
     91a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
     91c:	86 e8       	ldi	r24, 0x86	; 134
     91e:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
     920:	08 95       	ret

00000922 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     922:	90 91 56 01 	lds	r25, 0x0156
     926:	80 91 57 01 	lds	r24, 0x0157
     92a:	98 17       	cp	r25, r24
     92c:	19 f4       	brne	.+6      	; 0x934 <uart_getc+0x12>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	31 e0       	ldi	r19, 0x01	; 1
     932:	12 c0       	rjmp	.+36     	; 0x958 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     934:	e0 91 57 01 	lds	r30, 0x0157
     938:	ef 5f       	subi	r30, 0xFF	; 255
     93a:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
     93c:	e0 93 57 01 	sts	0x0157, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	ec 5c       	subi	r30, 0xCC	; 204
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
     948:	20 91 58 01 	lds	r18, 0x0158
     94c:	92 2f       	mov	r25, r18
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	ac 01       	movw	r20, r24
     952:	43 0f       	add	r20, r19
     954:	51 1d       	adc	r21, r1
     956:	9a 01       	movw	r18, r20

}/* uart_getc */
     958:	c9 01       	movw	r24, r18
     95a:	08 95       	ret

0000095c <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
     95c:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     95e:	90 91 54 01 	lds	r25, 0x0154
     962:	9f 5f       	subi	r25, 0xFF	; 255
     964:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     966:	80 91 55 01 	lds	r24, 0x0155
     96a:	98 17       	cp	r25, r24
     96c:	e1 f3       	breq	.-8      	; 0x966 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     96e:	e9 2f       	mov	r30, r25
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ec 5e       	subi	r30, 0xEC	; 236
     974:	fe 4f       	sbci	r31, 0xFE	; 254
     976:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
     978:	90 93 54 01 	sts	0x0154, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     97c:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
     97e:	08 95       	ret

00000980 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	03 c0       	rjmp	.+6      	; 0x98e <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
     988:	21 96       	adiw	r28, 0x01	; 1
     98a:	0e 94 ae 04 	call	0x95c	; 0x95c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     98e:	88 81       	ld	r24, Y
     990:	88 23       	and	r24, r24
     992:	d1 f7       	brne	.-12     	; 0x988 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
     9a2:	0e 94 ae 04 	call	0x95c	; 0x95c <uart_putc>
     9a6:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     9a8:	21 96       	adiw	r28, 0x01	; 1
     9aa:	84 91       	lpm	r24, Z+
     9ac:	88 23       	and	r24, r24
     9ae:	c9 f7       	brne	.-14     	; 0x9a2 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <__vector_20>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	2f 93       	push	r18
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
     9ca:	92 b1       	in	r25, 0x02	; 2
    data = UART1_DATA;
     9cc:	23 b1       	in	r18, 0x03	; 3
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     9ce:	e0 91 9b 01 	lds	r30, 0x019B
     9d2:	ef 5f       	subi	r30, 0xFF	; 255
     9d4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
     9d6:	80 91 9c 01 	lds	r24, 0x019C
     9da:	e8 17       	cp	r30, r24
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <__vector_20+0x2c>
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	08 c0       	rjmp	.+16     	; 0x9f2 <__vector_20+0x3c>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
     9e2:	89 2f       	mov	r24, r25
     9e4:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
     9e6:	e0 93 9b 01 	sts	0x019B, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	e7 58       	subi	r30, 0x87	; 135
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	20 83       	st	Z, r18
    }
    UART1_LastRxError = lastRxError;   
     9f2:	80 93 9d 01 	sts	0x019D, r24
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	2f 91       	pop	r18
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti

00000a0a <__vector_22>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
     a0a:	1f 92       	push	r1
     a0c:	0f 92       	push	r0
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
     a1c:	90 91 99 01 	lds	r25, 0x0199
     a20:	80 91 9a 01 	lds	r24, 0x019A
     a24:	98 17       	cp	r25, r24
     a26:	61 f0       	breq	.+24     	; 0xa40 <__vector_22+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     a28:	e0 91 9a 01 	lds	r30, 0x019A
     a2c:	ef 5f       	subi	r30, 0xFF	; 255
     a2e:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
     a30:	e0 93 9a 01 	sts	0x019A, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	e7 5a       	subi	r30, 0xA7	; 167
     a38:	fe 4f       	sbci	r31, 0xFE	; 254
     a3a:	80 81       	ld	r24, Z
     a3c:	83 b9       	out	0x03, r24	; 3
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <__vector_22+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
     a40:	0d 98       	cbi	0x01, 5	; 1
    }
}
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <uart1_init>:
Purpose:  initialize UART1 and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
     a54:	9c 01       	movw	r18, r24
    UART1_TxHead = 0;
     a56:	10 92 99 01 	sts	0x0199, r1
    UART1_TxTail = 0;
     a5a:	10 92 9a 01 	sts	0x019A, r1
    UART1_RxHead = 0;
     a5e:	10 92 9b 01 	sts	0x019B, r1
    UART1_RxTail = 0;
     a62:	10 92 9c 01 	sts	0x019C, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     a66:	97 ff       	sbrs	r25, 7
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <uart1_init+0x1c>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	82 b9       	out	0x02, r24	; 2
      baudrate &= ~0x8000;
     a6e:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
     a70:	3c bf       	out	0x3c, r19	; 60
    UBRR1L = (unsigned char) baudrate;
     a72:	20 b9       	out	0x00, r18	; 0

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
     a74:	88 e9       	ldi	r24, 0x98	; 152
     a76:	81 b9       	out	0x01, r24	; 1
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
     a78:	86 e8       	ldi	r24, 0x86	; 134
     a7a:	8c bf       	out	0x3c, r24	; 60
    #else
    UCSR1C = (3<<UCSZ10);
    #endif 
}/* uart_init */
     a7c:	08 95       	ret

00000a7e <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
     a7e:	90 91 9b 01 	lds	r25, 0x019B
     a82:	80 91 9c 01 	lds	r24, 0x019C
     a86:	98 17       	cp	r25, r24
     a88:	19 f4       	brne	.+6      	; 0xa90 <uart1_getc+0x12>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	31 e0       	ldi	r19, 0x01	; 1
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <uart1_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
     a90:	e0 91 9c 01 	lds	r30, 0x019C
     a94:	ef 5f       	subi	r30, 0xFF	; 255
     a96:	ef 71       	andi	r30, 0x1F	; 31
    UART1_RxTail = tmptail; 
     a98:	e0 93 9c 01 	sts	0x019C, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	e7 58       	subi	r30, 0x87	; 135
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	30 81       	ld	r19, Z
    
    return (UART1_LastRxError << 8) + data;
     aa4:	20 91 9d 01 	lds	r18, 0x019D
     aa8:	92 2f       	mov	r25, r18
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	ac 01       	movw	r20, r24
     aae:	43 0f       	add	r20, r19
     ab0:	51 1d       	adc	r21, r1
     ab2:	9a 01       	movw	r18, r20

}/* uart1_getc */
     ab4:	c9 01       	movw	r24, r18
     ab6:	08 95       	ret

00000ab8 <uart1_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart1_putc(unsigned char data)
{
     ab8:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
     aba:	90 91 99 01 	lds	r25, 0x0199
     abe:	9f 5f       	subi	r25, 0xFF	; 255
     ac0:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
     ac2:	80 91 9a 01 	lds	r24, 0x019A
     ac6:	98 17       	cp	r25, r24
     ac8:	e1 f3       	breq	.-8      	; 0xac2 <uart1_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
     aca:	e9 2f       	mov	r30, r25
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	e7 5a       	subi	r30, 0xA7	; 167
     ad0:	fe 4f       	sbci	r31, 0xFE	; 254
     ad2:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
     ad4:	90 93 99 01 	sts	0x0199, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
     ad8:	0d 9a       	sbi	0x01, 5	; 1

}/* uart1_putc */
     ada:	08 95       	ret

00000adc <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <uart1_puts+0xe>
    while (*s) 
      uart1_putc(*s++);
     ae4:	21 96       	adiw	r28, 0x01	; 1
     ae6:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
     aea:	88 81       	ld	r24, Y
     aec:	88 23       	and	r24, r24
     aee:	d1 f7       	brne	.-12     	; 0xae4 <uart1_puts+0x8>
      uart1_putc(*s++);

}/* uart1_puts */
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <uart1_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
     afe:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
     b02:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
     b04:	21 96       	adiw	r28, 0x01	; 1
     b06:	84 91       	lpm	r24, Z+
     b08:	88 23       	and	r24, r24
     b0a:	c9 f7       	brne	.-14     	; 0xafe <uart1_puts_p+0x8>
      uart1_putc(c);

}/* uart1_puts_p */
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <__vector_16>:
	volatile struct 	 rgb to;		//Zielfarbe
	uint16_t time;		//100ms pro Digit
} f_ctrl;

// Timer 0 Output COMPARE Interrupt
ISR(TIMER0_COMP_vect) {
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
	//hier werden die Takt bis zum nächsten INt einfach hinzuadiert. 
	//Der Timer läuft danach wieder über.
	//So stimmt der Takt trotz der Zeit, die die Int Routine verbraucht.
    //OCR0 += (uint8_t)T_PWM;
    //OCR0 += 174;  //CPU-Takt / (Frequenz * Auflösung) 90Hz
    OCR0 += 156;
     b26:	81 b7       	in	r24, 0x31	; 49
     b28:	84 56       	subi	r24, 0x64	; 100
     b2a:	81 bf       	out	0x31, r24	; 49
    
    if (pwm_setting[0] <= pwm_cnt) tmpPort |= (1<<0);
     b2c:	20 91 9e 01 	lds	r18, 0x019E
     b30:	30 91 9f 01 	lds	r19, 0x019F
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	80 91 a0 01 	lds	r24, 0x01A0
     b3a:	90 91 a1 01 	lds	r25, 0x01A1
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	08 f0       	brcs	.+2      	; 0xb46 <__vector_16+0x34>
     b44:	41 e0       	ldi	r20, 0x01	; 1
    if (pwm_setting[1] <= pwm_cnt) tmpPort |= (1<<1);
     b46:	80 91 a2 01 	lds	r24, 0x01A2
     b4a:	90 91 a3 01 	lds	r25, 0x01A3
     b4e:	28 17       	cp	r18, r24
     b50:	39 07       	cpc	r19, r25
     b52:	08 f0       	brcs	.+2      	; 0xb56 <__vector_16+0x44>
     b54:	42 60       	ori	r20, 0x02	; 2
    if (pwm_setting[2] <= pwm_cnt) tmpPort |= (1<<2);
     b56:	80 91 a4 01 	lds	r24, 0x01A4
     b5a:	90 91 a5 01 	lds	r25, 0x01A5
     b5e:	28 17       	cp	r18, r24
     b60:	39 07       	cpc	r19, r25
     b62:	08 f0       	brcs	.+2      	; 0xb66 <__vector_16+0x54>
     b64:	44 60       	ori	r20, 0x04	; 4
    if (pwm_setting[3] <= pwm_cnt) tmpPort |= (1<<3);
     b66:	80 91 a6 01 	lds	r24, 0x01A6
     b6a:	90 91 a7 01 	lds	r25, 0x01A7
     b6e:	28 17       	cp	r18, r24
     b70:	39 07       	cpc	r19, r25
     b72:	08 f0       	brcs	.+2      	; 0xb76 <__vector_16+0x64>
     b74:	48 60       	ori	r20, 0x08	; 8
    
    //Später sollte das anders gelöst sein.
    //Nur die gesetzten Bist sollen auf den Port uebertragen werden
    //so kann der Port auch für andere Aufgaben genutzt werden!
    
    PWM_PORT = tmpPort;                         // PWMs aktualisieren  
     b76:	4b bb       	out	0x1b, r20	; 27
    
    if (pwm_cnt==1023) //1023 schritte Auflößung
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	2f 3f       	cpi	r18, 0xFF	; 255
     b7c:	38 07       	cpc	r19, r24
     b7e:	29 f4       	brne	.+10     	; 0xb8a <__vector_16+0x78>
        pwm_cnt=0;
     b80:	10 92 9f 01 	sts	0x019F, r1
     b84:	10 92 9e 01 	sts	0x019E, r1
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <__vector_16+0x84>
    else
        pwm_cnt++;
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	30 93 9f 01 	sts	0x019F, r19
     b92:	20 93 9e 01 	sts	0x019E, r18
}
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <led_init>:

//Initialisiert die Lib 
void led_init(void) 
{
	LED_On_DDR |= (1<<LED_On_Pin);	//LED_On_Pin als Ausgang
     baa:	a0 9a       	sbi	0x14, 0	; 20
    PWM_DDR = 0xFF;			// Port als Ausgang
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	8a bb       	out	0x1a, r24	; 26
    TIMSK |= (1<<OCIE0);   // Interrupt freischalten
     bb0:	89 b7       	in	r24, 0x39	; 57
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	89 bf       	out	0x39, r24	; 57
    ETIMSK |= (1<<OCIE3A);
     bb6:	ed e7       	ldi	r30, 0x7D	; 125
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 61       	ori	r24, 0x10	; 16
     bbe:	80 83       	st	Z, r24
    f_ctrl.state = fader_stop;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 ab 01 	sts	0x01AB, r24
    DDRD |= (1<<DDB4);
     bc6:	8c 9a       	sbi	0x11, 4	; 17
		
}
     bc8:	08 95       	ret

00000bca <led_on>:

//Schaltet LED und PWM aus
void led_on(void)
{
	LED_On_Port |= (1<<LED_On_Pin); //Mosfet einschalten
     bca:	a8 9a       	sbi	0x15, 0	; 21
	TCCR0 |= (1 << CS00);	// Timer mit vollem Sys-takt starten	
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	83 bf       	out	0x33, r24	; 51
}
     bd2:	08 95       	ret

00000bd4 <led_off>:

//Schaltet LED und PWM an
void led_off(void)
{
	TCCR0 &= ~(1 << CS00);	// Timer deaktivieren
     bd4:	83 b7       	in	r24, 0x33	; 51
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	83 bf       	out	0x33, r24	; 51
	PWM_PORT = 0x00;		//Port abschalten
     bda:	1b ba       	out	0x1b, r1	; 27
	LED_On_Port &= ~(1<<LED_On_Pin); //Mos-Fet abschalten
     bdc:	a8 98       	cbi	0x15, 0	; 21
}
     bde:	08 95       	ret

00000be0 <set_led_color>:
/*
Setzt eine Farbe. Die Farbe wird als Zeiger auf ein Struct
übergeben. So wird das kopieren vermieden. 
*/
void set_led_color(struct rgb *Color)
{
     be0:	fc 01       	movw	r30, r24
	//color_akt "." rgb weil es direkt adressiert wird.
	//Color "->" rgb weil es als Pointer übergeben wurde
	uint8_t i;
	for(i=0;i<3;i++)
	{
		Color_akt.rgb[i] = Color->rgb[i];	//Farbe unkorrigiert zwischenspeichern
     be2:	80 81       	ld	r24, Z
     be4:	80 93 a8 01 	sts	0x01A8, r24
     be8:	41 81       	ldd	r20, Z+1	; 0x01
     bea:	40 93 a9 01 	sts	0x01A9, r20
     bee:	52 81       	ldd	r21, Z+2	; 0x02
     bf0:	50 93 aa 01 	sts	0x01AA, r21
                                    
//gibt den für das menschliche Auge korigierten Wert zurück.
uint16_t human_correction (uint8_t value)
{
	//Gibt den entsprechenden Farbwert aus der Tabelle zurück.
	return pgm_read_word(pwmtable + value);
     bf4:	e8 2f       	mov	r30, r24
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	20 e7       	ldi	r18, 0x70	; 112
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	e2 0f       	add	r30, r18
     c02:	f3 1f       	adc	r31, r19
     c04:	85 91       	lpm	r24, Z+
     c06:	94 91       	lpm	r25, Z+
	}
	
//	cli();		//Opperation muss atomar erfolgen, also Int abschalten
	for (i=0;i<3;i++)
	{
		pwm_setting[i] = human_correction(Color->rgb[i]);
     c08:	90 93 a1 01 	sts	0x01A1, r25
     c0c:	80 93 a0 01 	sts	0x01A0, r24
                                    
//gibt den für das menschliche Auge korigierten Wert zurück.
uint16_t human_correction (uint8_t value)
{
	//Gibt den entsprechenden Farbwert aus der Tabelle zurück.
	return pgm_read_word(pwmtable + value);
     c10:	e4 2f       	mov	r30, r20
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	e2 0f       	add	r30, r18
     c1a:	f3 1f       	adc	r31, r19
     c1c:	85 91       	lpm	r24, Z+
     c1e:	94 91       	lpm	r25, Z+
	}
	
//	cli();		//Opperation muss atomar erfolgen, also Int abschalten
	for (i=0;i<3;i++)
	{
		pwm_setting[i] = human_correction(Color->rgb[i]);
     c20:	90 93 a3 01 	sts	0x01A3, r25
     c24:	80 93 a2 01 	sts	0x01A2, r24
                                    
//gibt den für das menschliche Auge korigierten Wert zurück.
uint16_t human_correction (uint8_t value)
{
	//Gibt den entsprechenden Farbwert aus der Tabelle zurück.
	return pgm_read_word(pwmtable + value);
     c28:	e5 2f       	mov	r30, r21
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e2 0f       	add	r30, r18
     c32:	f3 1f       	adc	r31, r19
     c34:	85 91       	lpm	r24, Z+
     c36:	94 91       	lpm	r25, Z+
	}
	
//	cli();		//Opperation muss atomar erfolgen, also Int abschalten
	for (i=0;i<3;i++)
	{
		pwm_setting[i] = human_correction(Color->rgb[i]);
     c38:	90 93 a5 01 	sts	0x01A5, r25
     c3c:	80 93 a4 01 	sts	0x01A4, r24
	}
//	sei();
}
     c40:	08 95       	ret

00000c42 <hsv2rgb>:

	set_led_color(&old);
}

void hsv2rgb(struct hsv *Color_hsv, struct rgb *Color_rgb)
{
     c42:	af 92       	push	r10
     c44:	bf 92       	push	r11
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	fc 01       	movw	r30, r24
     c58:	eb 01       	movw	r28, r22
	//Wenn Sättigung 0 ist die Farbe immer schwarz also
	//wird nur rgb 0x00 0x00 0x00 zurück gegeben.
    if ((Color_hsv->saturation) == 0) 
     c5a:	02 81       	ldd	r16, Z+2	; 0x02
     c5c:	00 23       	and	r16, r16
     c5e:	21 f4       	brne	.+8      	; 0xc68 <hsv2rgb+0x26>
    {
    	Color_rgb->Red	 = 0x00;
     c60:	18 82       	st	Y, r1
    	Color_rgb->Green = 0x00;
     c62:	19 82       	std	Y+1, r1	; 0x01
    	Color_rgb->Blue	 = 0x00;
     c64:	1a 82       	std	Y+2, r1	; 0x02
     c66:	99 c0       	rjmp	.+306    	; 0xd9a <hsv2rgb+0x158>
        return;
    }

	//Hue darf nicht größer 360 sein.
	//if (Color_hsv->hue > 360) Color_hsv->hue = 360;
    uint16_t h = Color_hsv->hue % 360;
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	68 e6       	ldi	r22, 0x68	; 104
     c6e:	71 e0       	ldi	r23, 0x01	; 1
     c70:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     c74:	48 2f       	mov	r20, r24
     c76:	d9 2e       	mov	r13, r25
    //Werte den Arbeitsvariablen zuweisen
    //uint16_t h = Color_hsv->hue; 
    uint8_t s = Color_hsv->saturation;
    uint8_t v = Color_hsv->value;
     c78:	c3 80       	ldd	r12, Z+3	; 0x03

	//Dieser Code stammt nicht von mir.
	//Siehe -> Wikipedia und PDF
    uint16_t f = ((h % 60) * 255 + 30)/60;
     c7a:	6c e3       	ldi	r22, 0x3C	; 60
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     c82:	2f ef       	ldi	r18, 0xFF	; 255
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	bc 01       	movw	r22, r24
     c88:	62 9f       	mul	r22, r18
     c8a:	c0 01       	movw	r24, r0
     c8c:	63 9f       	mul	r22, r19
     c8e:	90 0d       	add	r25, r0
     c90:	72 9f       	mul	r23, r18
     c92:	90 0d       	add	r25, r0
     c94:	11 24       	eor	r1, r1
     c96:	4e 96       	adiw	r24, 0x1e	; 30
     c98:	6c e3       	ldi	r22, 0x3C	; 60
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     ca0:	fb 01       	movw	r30, r22
    uint16_t p = (v * (255-s)+128)/255;
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	c9 01       	movw	r24, r18
     ca6:	80 1b       	sub	r24, r16
     ca8:	91 0b       	sbc	r25, r17
     caa:	ec 2c       	mov	r14, r12
     cac:	ff 24       	eor	r15, r15
     cae:	bc 01       	movw	r22, r24
     cb0:	6e 9d       	mul	r22, r14
     cb2:	c0 01       	movw	r24, r0
     cb4:	6f 9d       	mul	r22, r15
     cb6:	90 0d       	add	r25, r0
     cb8:	7e 9d       	mul	r23, r14
     cba:	90 0d       	add	r25, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	80 58       	subi	r24, 0x80	; 128
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	6f ef       	ldi	r22, 0xFF	; 255
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	0e 94 47 0c 	call	0x188e	; 0x188e <__divmodhi4>
     cca:	b6 2e       	mov	r11, r22
    uint16_t q = ((v * (255 - (s*f+128)/255))+128)/255;
     ccc:	e0 9f       	mul	r30, r16
     cce:	c0 01       	movw	r24, r0
     cd0:	e1 9f       	mul	r30, r17
     cd2:	90 0d       	add	r25, r0
     cd4:	f0 9f       	mul	r31, r16
     cd6:	90 0d       	add	r25, r0
     cd8:	11 24       	eor	r1, r1
     cda:	80 58       	subi	r24, 0x80	; 128
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	6f ef       	ldi	r22, 0xFF	; 255
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     ce6:	c9 01       	movw	r24, r18
     ce8:	86 1b       	sub	r24, r22
     cea:	97 0b       	sbc	r25, r23
     cec:	bc 01       	movw	r22, r24
     cee:	6e 9d       	mul	r22, r14
     cf0:	c0 01       	movw	r24, r0
     cf2:	6f 9d       	mul	r22, r15
     cf4:	90 0d       	add	r25, r0
     cf6:	7e 9d       	mul	r23, r14
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	80 58       	subi	r24, 0x80	; 128
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	6f ef       	ldi	r22, 0xFF	; 255
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     d08:	a6 2e       	mov	r10, r22
    uint16_t t = (v * (255 - ((s * (255 - f))/255)))/255;
     d0a:	c9 01       	movw	r24, r18
     d0c:	8e 1b       	sub	r24, r30
     d0e:	9f 0b       	sbc	r25, r31
     d10:	bc 01       	movw	r22, r24
     d12:	60 9f       	mul	r22, r16
     d14:	c0 01       	movw	r24, r0
     d16:	61 9f       	mul	r22, r17
     d18:	90 0d       	add	r25, r0
     d1a:	70 9f       	mul	r23, r16
     d1c:	90 0d       	add	r25, r0
     d1e:	11 24       	eor	r1, r1
     d20:	6f ef       	ldi	r22, 0xFF	; 255
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     d28:	26 1b       	sub	r18, r22
     d2a:	37 0b       	sbc	r19, r23
     d2c:	2e 9d       	mul	r18, r14
     d2e:	c0 01       	movw	r24, r0
     d30:	2f 9d       	mul	r18, r15
     d32:	90 0d       	add	r25, r0
     d34:	3e 9d       	mul	r19, r14
     d36:	90 0d       	add	r25, r0
     d38:	11 24       	eor	r1, r1
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     d42:	26 2f       	mov	r18, r22

    uint8_t i = h/60;

    switch (i) 
     d44:	84 2f       	mov	r24, r20
     d46:	9d 2d       	mov	r25, r13
     d48:	6c e3       	ldi	r22, 0x3C	; 60
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     d50:	62 30       	cpi	r22, 0x02	; 2
     d52:	a9 f0       	breq	.+42     	; 0xd7e <hsv2rgb+0x13c>
     d54:	63 30       	cpi	r22, 0x03	; 3
     d56:	28 f4       	brcc	.+10     	; 0xd62 <hsv2rgb+0x120>
     d58:	66 23       	and	r22, r22
     d5a:	51 f0       	breq	.+20     	; 0xd70 <hsv2rgb+0x12e>
     d5c:	61 30       	cpi	r22, 0x01	; 1
     d5e:	e9 f4       	brne	.+58     	; 0xd9a <hsv2rgb+0x158>
     d60:	0a c0       	rjmp	.+20     	; 0xd76 <hsv2rgb+0x134>
     d62:	64 30       	cpi	r22, 0x04	; 4
     d64:	99 f0       	breq	.+38     	; 0xd8c <hsv2rgb+0x14a>
     d66:	64 30       	cpi	r22, 0x04	; 4
     d68:	70 f0       	brcs	.+28     	; 0xd86 <hsv2rgb+0x144>
     d6a:	65 30       	cpi	r22, 0x05	; 5
     d6c:	b1 f4       	brne	.+44     	; 0xd9a <hsv2rgb+0x158>
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <hsv2rgb+0x152>
    {
        case 0:
        	Color_rgb->Red	 = v;
     d70:	c8 82       	st	Y, r12
    		Color_rgb->Green = t;
     d72:	29 83       	std	Y+1, r18	; 0x01
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <hsv2rgb+0x138>
    		Color_rgb->Blue	 = p;
            break;

        case 1:
        	Color_rgb->Red	 = q;
     d76:	a8 82       	st	Y, r10
    		Color_rgb->Green = v;
     d78:	c9 82       	std	Y+1, r12	; 0x01
    		Color_rgb->Blue	 = p;
     d7a:	ba 82       	std	Y+2, r11	; 0x02
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <hsv2rgb+0x158>
            break;

        case 2:
        	Color_rgb->Red	 = p;
     d7e:	b8 82       	st	Y, r11
    		Color_rgb->Green = v;
     d80:	c9 82       	std	Y+1, r12	; 0x01
    		Color_rgb->Blue	 = t;
     d82:	2a 83       	std	Y+2, r18	; 0x02
     d84:	0a c0       	rjmp	.+20     	; 0xd9a <hsv2rgb+0x158>
            break;

        case 3:
        	Color_rgb->Red	 = p;
     d86:	b8 82       	st	Y, r11
    		Color_rgb->Green = q;
     d88:	a9 82       	std	Y+1, r10	; 0x01
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <hsv2rgb+0x14e>
    		Color_rgb->Blue	 = v;
            break;

        case 4:
        	Color_rgb->Red	 = t;
     d8c:	28 83       	st	Y, r18
    		Color_rgb->Green = p;
     d8e:	b9 82       	std	Y+1, r11	; 0x01
    		Color_rgb->Blue	 = v;
     d90:	ca 82       	std	Y+2, r12	; 0x02
     d92:	03 c0       	rjmp	.+6      	; 0xd9a <hsv2rgb+0x158>
            break;

        case 5:
        	Color_rgb->Red	 = v;
     d94:	c8 82       	st	Y, r12
    		Color_rgb->Green = p;
     d96:	b9 82       	std	Y+1, r11	; 0x01
    		Color_rgb->Blue	 = q;
     d98:	aa 82       	std	Y+2, r10	; 0x02
            break;
    }
}  
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	08 95       	ret

00000db0 <set_fanspeed>:

void set_fanspeed(uint16_t speed)
{
	pwm_setting[3] = speed;
     db0:	90 93 a7 01 	sts	0x01A7, r25
     db4:	80 93 a6 01 	sts	0x01A6, r24
}
     db8:	08 95       	ret

00000dba <human_correction>:
                                    
//gibt den für das menschliche Auge korigierten Wert zurück.
uint16_t human_correction (uint8_t value)
{
	//Gibt den entsprechenden Farbwert aus der Tabelle zurück.
	return pgm_read_word(pwmtable + value);
     dba:	e8 2f       	mov	r30, r24
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	e0 59       	subi	r30, 0x90	; 144
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	25 91       	lpm	r18, Z+
     dc8:	34 91       	lpm	r19, Z+
}
     dca:	c9 01       	movw	r24, r18
     dcc:	08 95       	ret

00000dce <fade_calc_diff>:

//Berechnet die Schritte pro Tick. So erreichen die Farben
//gleichmäßig den Endwert.
uint8_t fade_calc_diff(uint8_t val1, uint8_t val2)
{
	if (val1 > val2) return val1 - val2;
     dce:	68 17       	cp	r22, r24
     dd0:	10 f4       	brcc	.+4      	; 0xdd6 <fade_calc_diff+0x8>
     dd2:	86 1b       	sub	r24, r22
     dd4:	08 95       	ret
	if (val1 < val2) return val2 - val1;
     dd6:	86 17       	cp	r24, r22
     dd8:	10 f0       	brcs	.+4      	; 0xdde <fade_calc_diff+0x10>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	08 95       	ret
     dde:	68 1b       	sub	r22, r24
     de0:	86 2f       	mov	r24, r22
	return 0;
}
     de2:	08 95       	ret

00000de4 <fade_calc_bigg>:

//Gibt den größten Wert zurück
uint8_t fade_calc_bigg(uint8_t val1, uint8_t val2, uint8_t val3)
{
     de4:	68 17       	cp	r22, r24
     de6:	08 f4       	brcc	.+2      	; 0xdea <fade_calc_bigg+0x6>
     de8:	68 2f       	mov	r22, r24
     dea:	64 17       	cp	r22, r20
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <fade_calc_bigg+0xc>
     dee:	64 2f       	mov	r22, r20
	uint8_t tmp = val1;
	if (val2 > tmp) tmp = val2;
	if (val3 > tmp) tmp = val3;
	return tmp;
}
     df0:	86 2f       	mov	r24, r22
     df2:	08 95       	ret

00000df4 <rgb_fade_int>:

//Initialisiert den Fader
void rgb_fade_int(struct rgb Target, uint16_t time)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	00 d0       	rcall	.+0      	; 0xdfa <rgb_fade_int+0x6>
     dfa:	0f 92       	push	r0
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	69 83       	std	Y+1, r22	; 0x01
     e02:	7a 83       	std	Y+2, r23	; 0x02
     e04:	8b 83       	std	Y+3, r24	; 0x03
	f_ctrl.time = time;			//Target festlegen
     e06:	50 93 bd 01 	sts	0x01BD, r21
     e0a:	40 93 bc 01 	sts	0x01BC, r20
	f_ctrl.from = Color_akt;
     e0e:	a6 eb       	ldi	r26, 0xB6	; 182
     e10:	b1 e0       	ldi	r27, 0x01	; 1
     e12:	e8 ea       	ldi	r30, 0xA8	; 168
     e14:	f1 e0       	ldi	r31, 0x01	; 1
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	01 90       	ld	r0, Z+
     e1a:	0d 92       	st	X+, r0
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <rgb_fade_int+0x24>
	f_ctrl.to = Target;
     e20:	a9 eb       	ldi	r26, 0xB9	; 185
     e22:	b1 e0       	ldi	r27, 0x01	; 1
     e24:	fe 01       	movw	r30, r28
     e26:	31 96       	adiw	r30, 0x01	; 1
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	01 90       	ld	r0, Z+
     e2c:	0d 92       	st	X+, r0
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	e1 f7       	brne	.-8      	; 0xe2a <rgb_fade_int+0x36>
	f_ctrl.count = 0;			//Counter zurücksetzen
     e32:	10 92 b3 01 	sts	0x01B3, r1
     e36:	10 92 b2 01 	sts	0x01B2, r1
	TCNT3 = (uint16_t)0;		//Zälregister 16bit Timer 3 zurücksetzen
     e3a:	10 92 89 00 	sts	0x0089, r1
     e3e:	10 92 88 00 	sts	0x0088, r1
	OCR3A = (uint16_t)249;		//Nächster interupt in 1ms
     e42:	89 ef       	ldi	r24, 0xF9	; 249
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	90 93 87 00 	sts	0x0087, r25
     e4a:	80 93 86 00 	sts	0x0086, r24
	f_ctrl.state = fader_run;	//Statemachine zurücksetzen
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	80 93 ab 01 	sts	0x01AB, r24
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <rgb_fade_tick>:

void rgb_fade_tick(void)
{
	//Wenn der Fader gestartet wurde  	

	if (f_ctrl.state == fader_run)
     e60:	80 91 ab 01 	lds	r24, 0x01AB
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	09 f0       	breq	.+2      	; 0xe6a <rgb_fade_tick+0xa>
     e68:	60 c0       	rjmp	.+192    	; 0xf2a <rgb_fade_tick+0xca>
     e6a:	ac ea       	ldi	r26, 0xAC	; 172
     e6c:	b1 e0       	ldi	r27, 0x01	; 1
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
	{	
		//Differenz zu jedem Farbkanal ausrechnen
		uint8_t i;
 		for(i=0; i<3; i++)
 		{
 			f_ctrl.diff[i] = fade_calc_diff(f_ctrl.from.rgb[i], f_ctrl.to.rgb[i]);
     e72:	f9 01       	movw	r30, r18
     e74:	e5 55       	subi	r30, 0x55	; 85
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	93 85       	ldd	r25, Z+11	; 0x0b
     e7a:	86 85       	ldd	r24, Z+14	; 0x0e

//Berechnet die Schritte pro Tick. So erreichen die Farben
//gleichmäßig den Endwert.
uint8_t fade_calc_diff(uint8_t val1, uint8_t val2)
{
	if (val1 > val2) return val1 - val2;
     e7c:	89 17       	cp	r24, r25
     e7e:	18 f4       	brcc	.+6      	; 0xe86 <rgb_fade_tick+0x26>
     e80:	98 1b       	sub	r25, r24
     e82:	89 2f       	mov	r24, r25
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <rgb_fade_tick+0x30>
	if (val1 < val2) return val2 - val1;
     e86:	98 17       	cp	r25, r24
     e88:	10 f0       	brcs	.+4      	; 0xe8e <rgb_fade_tick+0x2e>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <rgb_fade_tick+0x30>
     e8e:	89 1b       	sub	r24, r25
	{	
		//Differenz zu jedem Farbkanal ausrechnen
		uint8_t i;
 		for(i=0; i<3; i++)
 		{
 			f_ctrl.diff[i] = fade_calc_diff(f_ctrl.from.rgb[i], f_ctrl.to.rgb[i]);
     e90:	8d 93       	st	X+, r24
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255

	if (f_ctrl.state == fader_run)
	{	
		//Differenz zu jedem Farbkanal ausrechnen
		uint8_t i;
 		for(i=0; i<3; i++)
     e96:	23 30       	cpi	r18, 0x03	; 3
     e98:	31 05       	cpc	r19, r1
     e9a:	59 f7       	brne	.-42     	; 0xe72 <rgb_fade_tick+0x12>
 		{
 			f_ctrl.diff[i] = fade_calc_diff(f_ctrl.from.rgb[i], f_ctrl.to.rgb[i]);
 		}
 		
 		f_ctrl.max_count = f_ctrl.time;	//Timer initialisieren (Anzahl der Ticks)
     e9c:	80 91 bc 01 	lds	r24, 0x01BC
     ea0:	90 91 bd 01 	lds	r25, 0x01BD
     ea4:	90 93 b5 01 	sts	0x01B5, r25
     ea8:	80 93 b4 01 	sts	0x01B4, r24
 		//Schritte pro Farbkanal, pro Tick berechnen
 		for(i=0; i<3;i++)
 		{
 			f_ctrl.step[i] = f_ctrl.max_count / f_ctrl.diff[i];
     eac:	80 91 b4 01 	lds	r24, 0x01B4
     eb0:	90 91 b5 01 	lds	r25, 0x01B5
     eb4:	60 91 ac 01 	lds	r22, 0x01AC
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     ebe:	60 93 af 01 	sts	0x01AF, r22
     ec2:	80 91 b4 01 	lds	r24, 0x01B4
     ec6:	90 91 b5 01 	lds	r25, 0x01B5
     eca:	60 91 ad 01 	lds	r22, 0x01AD
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     ed4:	60 93 b0 01 	sts	0x01B0, r22
     ed8:	80 91 b4 01 	lds	r24, 0x01B4
     edc:	90 91 b5 01 	lds	r25, 0x01B5
     ee0:	60 91 ae 01 	lds	r22, 0x01AE
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     eea:	60 93 b1 01 	sts	0x01B1, r22
     eee:	af ea       	ldi	r26, 0xAF	; 175
     ef0:	b1 e0       	ldi	r27, 0x01	; 1
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
 		
		//Faulheit verhindern 		
 		for (i=0;i<3;i++)
 		{
 			if ((f_ctrl.from.rgb[i] != f_ctrl.to.rgb[i]) && (f_ctrl.step[i] == 0))
 				f_ctrl.step[i] = 1;
     ef6:	41 e0       	ldi	r20, 0x01	; 1
 		}
 		
		//Faulheit verhindern 		
 		for (i=0;i<3;i++)
 		{
 			if ((f_ctrl.from.rgb[i] != f_ctrl.to.rgb[i]) && (f_ctrl.step[i] == 0))
     ef8:	f9 01       	movw	r30, r18
     efa:	e5 55       	subi	r30, 0x55	; 85
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	93 85       	ldd	r25, Z+11	; 0x0b
     f00:	86 85       	ldd	r24, Z+14	; 0x0e
     f02:	98 17       	cp	r25, r24
     f04:	21 f0       	breq	.+8      	; 0xf0e <rgb_fade_tick+0xae>
     f06:	8c 91       	ld	r24, X
     f08:	88 23       	and	r24, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <rgb_fade_tick+0xae>
 				f_ctrl.step[i] = 1;
     f0c:	4c 93       	st	X, r20
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	11 96       	adiw	r26, 0x01	; 1
 		{
 			f_ctrl.step[i] = f_ctrl.max_count / f_ctrl.diff[i];
 		}
 		
		//Faulheit verhindern 		
 		for (i=0;i<3;i++)
     f14:	23 30       	cpi	r18, 0x03	; 3
     f16:	31 05       	cpc	r19, r1
     f18:	79 f7       	brne	.-34     	; 0xef8 <rgb_fade_tick+0x98>
 			if ((f_ctrl.from.rgb[i] != f_ctrl.to.rgb[i]) && (f_ctrl.step[i] == 0))
 				f_ctrl.step[i] = 1;
 		}
 		
 		//Timer mit Prescaler 64 starten CTC-Mode
 		TCCR3B |= (1<<CS31) | (1<<CS30) | (1<<WGM32);
     f1a:	80 91 8a 00 	lds	r24, 0x008A
     f1e:	8b 60       	ori	r24, 0x0B	; 11
     f20:	80 93 8a 00 	sts	0x008A, r24
 		
 		//Fader aktivieren
 		f_ctrl.state = fader_running;
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	80 93 ab 01 	sts	0x01AB, r24

 	}
 	
 	if (f_ctrl.state == fader_running)
     f2a:	80 91 ab 01 	lds	r24, 0x01AB
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	21 f4       	brne	.+8      	; 0xf3a <rgb_fade_tick+0xda>
 	{
 		//Wenn der Fader laeuft, werden hier die Farben aktualisiert.
 		//Das spahrt Takte in der ISR
 		set_led_color(&f_ctrl.from);
     f32:	86 eb       	ldi	r24, 0xB6	; 182
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
 	}
 	
 	if (f_ctrl.state == fader_last)
     f3a:	80 91 ab 01 	lds	r24, 0x01AB
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	31 f4       	brne	.+12     	; 0xf4e <rgb_fade_tick+0xee>
 	{
 		f_ctrl.state = fader_idle;
     f42:	10 92 ab 01 	sts	0x01AB, r1
 		set_led_color(&f_ctrl.from);
     f46:	86 eb       	ldi	r24, 0xB6	; 182
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
     f4e:	08 95       	ret

00000f50 <fade_state>:
 	}
 }

uint8_t fade_state()
{
	return f_ctrl.state;
     f50:	80 91 ab 01 	lds	r24, 0x01AB
}
     f54:	08 95       	ret

00000f56 <__vector_7>:

ISR(TIMER3_COMPA_vect)
{
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	TCNT3 = (uint16_t)0;
     f7a:	10 92 89 00 	sts	0x0089, r1
     f7e:	10 92 88 00 	sts	0x0088, r1
	PORTD ^= (1<<PD4);
     f82:	82 b3       	in	r24, 0x12	; 18
     f84:	90 e1       	ldi	r25, 0x10	; 16
     f86:	89 27       	eor	r24, r25
     f88:	82 bb       	out	0x12, r24	; 18
	if (f_ctrl.count == f_ctrl.max_count)
     f8a:	20 91 b2 01 	lds	r18, 0x01B2
     f8e:	30 91 b3 01 	lds	r19, 0x01B3
     f92:	80 91 b4 01 	lds	r24, 0x01B4
     f96:	90 91 b5 01 	lds	r25, 0x01B5
     f9a:	28 17       	cp	r18, r24
     f9c:	39 07       	cpc	r19, r25
     f9e:	71 f4       	brne	.+28     	; 0xfbc <__vector_7+0x66>
	{	
		TCCR3B = 0;					//Timer stoppen
     fa0:	10 92 8a 00 	sts	0x008A, r1
		f_ctrl.from = f_ctrl.to;	//Werd auf zielwert setzen 
     fa4:	e6 eb       	ldi	r30, 0xB6	; 182
     fa6:	f1 e0       	ldi	r31, 0x01	; 1
     fa8:	df 01       	movw	r26, r30
     faa:	13 96       	adiw	r26, 0x03	; 3
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	0d 90       	ld	r0, X+
     fb0:	01 92       	st	Z+, r0
     fb2:	81 50       	subi	r24, 0x01	; 1
     fb4:	e1 f7       	brne	.-8      	; 0xfae <__vector_7+0x58>
		f_ctrl.state = fader_last;  //Statemachine auf letzten Lauf setzen
     fb6:	84 e0       	ldi	r24, 0x04	; 4
     fb8:	80 93 ab 01 	sts	0x01AB, r24
     fbc:	cf ea       	ldi	r28, 0xAF	; 175
     fbe:	d1 e0       	ldi	r29, 0x01	; 1
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
 		if (f_ctrl.from.rgb[i] > f_ctrl.to.rgb[i])
     fc4:	f9 01       	movw	r30, r18
     fc6:	e5 55       	subi	r30, 0x55	; 85
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	93 85       	ldd	r25, Z+11	; 0x0b
     fcc:	86 85       	ldd	r24, Z+14	; 0x0e
     fce:	89 17       	cp	r24, r25
     fd0:	68 f4       	brcc	.+26     	; 0xfec <__vector_7+0x96>
 		{
 			if(f_ctrl.count % f_ctrl.step[i] == 0)
     fd2:	80 91 b2 01 	lds	r24, 0x01B2
     fd6:	90 91 b3 01 	lds	r25, 0x01B3
     fda:	68 81       	ld	r22, Y
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     fe2:	89 2b       	or	r24, r25
     fe4:	19 f4       	brne	.+6      	; 0xfec <__vector_7+0x96>
 				f_ctrl.from.rgb[i]--;
     fe6:	83 85       	ldd	r24, Z+11	; 0x0b
     fe8:	81 50       	subi	r24, 0x01	; 1
     fea:	83 87       	std	Z+11, r24	; 0x0b
 		}
 		
 		if (f_ctrl.from.rgb[i] < f_ctrl.to.rgb[i])
     fec:	f9 01       	movw	r30, r18
     fee:	e5 55       	subi	r30, 0x55	; 85
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	93 85       	ldd	r25, Z+11	; 0x0b
     ff4:	86 85       	ldd	r24, Z+14	; 0x0e
     ff6:	98 17       	cp	r25, r24
     ff8:	68 f4       	brcc	.+26     	; 0x1014 <__vector_7+0xbe>
 		{
 			if(f_ctrl.count % f_ctrl.step[i] == 0)
     ffa:	80 91 b2 01 	lds	r24, 0x01B2
     ffe:	90 91 b3 01 	lds	r25, 0x01B3
    1002:	68 81       	ld	r22, Y
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
    100a:	89 2b       	or	r24, r25
    100c:	19 f4       	brne	.+6      	; 0x1014 <__vector_7+0xbe>
 				f_ctrl.from.rgb[i]++;
    100e:	83 85       	ldd	r24, Z+11	; 0x0b
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	83 87       	std	Z+11, r24	; 0x0b
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	21 96       	adiw	r28, 0x01	; 1
		f_ctrl.from = f_ctrl.to;	//Werd auf zielwert setzen 
		f_ctrl.state = fader_last;  //Statemachine auf letzten Lauf setzen
	}
	
	uint8_t i;
	for (i=0;i<3;i++)
    101a:	23 30       	cpi	r18, 0x03	; 3
    101c:	31 05       	cpc	r19, r1
    101e:	91 f6       	brne	.-92     	; 0xfc4 <__vector_7+0x6e>
 			if(f_ctrl.count % f_ctrl.step[i] == 0)
 				f_ctrl.from.rgb[i]++;
 		}
	} 

	f_ctrl.count++;				//Counter incrementieren	
    1020:	80 91 b2 01 	lds	r24, 0x01B2
    1024:	90 91 b3 01 	lds	r25, 0x01B3
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	90 93 b3 01 	sts	0x01B3, r25
    102e:	80 93 b2 01 	sts	0x01B2, r24

    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <sig_nok>:
	_delay_ms(70);

	set_led_color(&old);
}
void sig_nok()
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <sig_nok+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <sig_nok+0x8>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <sig_nok+0xa>
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	struct rgb old;
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
		old.rgb[i] = Color_akt.rgb[i];
    1064:	80 91 a8 01 	lds	r24, 0x01A8
    1068:	89 83       	std	Y+1, r24	; 0x01
		uart1_putc(Color_akt.rgb[i]);
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	struct rgb old;
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
		old.rgb[i] = Color_akt.rgb[i];
    1070:	80 91 a9 01 	lds	r24, 0x01A9
    1074:	8a 83       	std	Y+2, r24	; 0x02
		uart1_putc(Color_akt.rgb[i]);
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	struct rgb old;
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
		old.rgb[i] = Color_akt.rgb[i];
    107c:	80 91 aa 01 	lds	r24, 0x01AA
    1080:	8b 83       	std	Y+3, r24	; 0x03
		uart1_putc(Color_akt.rgb[i]);
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	}
	
	struct rgb temp;
	
	temp.Red = 200;
    1088:	88 ec       	ldi	r24, 0xC8	; 200
    108a:	8c 83       	std	Y+4, r24	; 0x04
	temp.Green = 50;
    108c:	82 e3       	ldi	r24, 0x32	; 50
    108e:	8d 83       	std	Y+5, r24	; 0x05
	temp.Blue = 0;
    1090:	1e 82       	std	Y+6, r1	; 0x06
	set_led_color(&temp);
    1092:	ce 01       	movw	r24, r28
    1094:	04 96       	adiw	r24, 0x04	; 4
    1096:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    109a:	88 ee       	ldi	r24, 0xE8	; 232
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	20 e9       	ldi	r18, 0x90	; 144
    10a0:	31 e0       	ldi	r19, 0x01	; 1
    10a2:	f9 01       	movw	r30, r18
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <sig_nok+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10aa:	d9 f7       	brne	.-10     	; 0x10a2 <sig_nok+0x4c>
	_delay_ms(100);

	temp.Red = 0;
    10ac:	1c 82       	std	Y+4, r1	; 0x04
	temp.Green = 0;
    10ae:	1d 82       	std	Y+5, r1	; 0x05
	temp.Blue = 0;
    10b0:	1e 82       	std	Y+6, r1	; 0x06
	set_led_color(&temp);
    10b2:	ce 01       	movw	r24, r28
    10b4:	04 96       	adiw	r24, 0x04	; 4
    10b6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    10ba:	84 ef       	ldi	r24, 0xF4	; 244
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	20 e9       	ldi	r18, 0x90	; 144
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	f9 01       	movw	r30, r18
    10c4:	31 97       	sbiw	r30, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <sig_nok+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ca:	d9 f7       	brne	.-10     	; 0x10c2 <sig_nok+0x6c>
	_delay_ms(50);

	temp.Red = 200;
    10cc:	88 ec       	ldi	r24, 0xC8	; 200
    10ce:	8c 83       	std	Y+4, r24	; 0x04
	temp.Green = 50;
    10d0:	82 e3       	ldi	r24, 0x32	; 50
    10d2:	8d 83       	std	Y+5, r24	; 0x05
	temp.Blue = 0;
    10d4:	1e 82       	std	Y+6, r1	; 0x06
	set_led_color(&temp);
    10d6:	ce 01       	movw	r24, r28
    10d8:	04 96       	adiw	r24, 0x04	; 4
    10da:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    10de:	88 ee       	ldi	r24, 0xE8	; 232
    10e0:	93 e0       	ldi	r25, 0x03	; 3
    10e2:	20 e9       	ldi	r18, 0x90	; 144
    10e4:	31 e0       	ldi	r19, 0x01	; 1
    10e6:	f9 01       	movw	r30, r18
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <sig_nok+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	d9 f7       	brne	.-10     	; 0x10e6 <sig_nok+0x90>
	_delay_ms(100);

	set_led_color(&old);
    10f0:	ce 01       	movw	r24, r28
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
}
    10f8:	26 96       	adiw	r28, 0x06	; 6
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <led_sig_ok>:
	}
//	sei();
}

void led_sig_ok()
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <led_sig_ok+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <led_sig_ok+0x8>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <led_sig_ok+0xa>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	struct rgb old;
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
		old.rgb[i] = Color_akt.rgb[i];
    1118:	80 91 a8 01 	lds	r24, 0x01A8
    111c:	89 83       	std	Y+1, r24	; 0x01
		uart1_putc(Color_akt.rgb[i]);
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	struct rgb old;
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
		old.rgb[i] = Color_akt.rgb[i];
    1124:	80 91 a9 01 	lds	r24, 0x01A9
    1128:	8a 83       	std	Y+2, r24	; 0x02
		uart1_putc(Color_akt.rgb[i]);
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	struct rgb old;
	
	uint8_t i;
	for (i=0;i<3;i++)
	{
		old.rgb[i] = Color_akt.rgb[i];
    1130:	80 91 aa 01 	lds	r24, 0x01AA
    1134:	8b 83       	std	Y+3, r24	; 0x03
		uart1_putc(Color_akt.rgb[i]);
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	}
	
	struct rgb temp;
	
	temp.Red = 50;
    113c:	82 e3       	ldi	r24, 0x32	; 50
    113e:	8c 83       	std	Y+4, r24	; 0x04
	temp.Green = 200;
    1140:	88 ec       	ldi	r24, 0xC8	; 200
    1142:	8d 83       	std	Y+5, r24	; 0x05
	temp.Blue = 0;
    1144:	1e 82       	std	Y+6, r1	; 0x06
	set_led_color(&temp);
    1146:	ce 01       	movw	r24, r28
    1148:	04 96       	adiw	r24, 0x04	; 4
    114a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    114e:	8c eb       	ldi	r24, 0xBC	; 188
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	20 e9       	ldi	r18, 0x90	; 144
    1154:	31 e0       	ldi	r19, 0x01	; 1
    1156:	f9 01       	movw	r30, r18
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <led_sig_ok+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	d9 f7       	brne	.-10     	; 0x1156 <led_sig_ok+0x4c>
	_delay_ms(70);

	temp.Red = 0;
    1160:	1c 82       	std	Y+4, r1	; 0x04
	temp.Green = 0;
    1162:	1d 82       	std	Y+5, r1	; 0x05
	temp.Blue = 0;
    1164:	1e 82       	std	Y+6, r1	; 0x06
	set_led_color(&temp);
    1166:	ce 01       	movw	r24, r28
    1168:	04 96       	adiw	r24, 0x04	; 4
    116a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    116e:	80 e9       	ldi	r24, 0x90	; 144
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	20 e9       	ldi	r18, 0x90	; 144
    1174:	31 e0       	ldi	r19, 0x01	; 1
    1176:	f9 01       	movw	r30, r18
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <led_sig_ok+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117e:	d9 f7       	brne	.-10     	; 0x1176 <led_sig_ok+0x6c>
	_delay_ms(40);

	temp.Red = 50;
    1180:	82 e3       	ldi	r24, 0x32	; 50
    1182:	8c 83       	std	Y+4, r24	; 0x04
	temp.Green = 200;
    1184:	88 ec       	ldi	r24, 0xC8	; 200
    1186:	8d 83       	std	Y+5, r24	; 0x05
	temp.Blue = 0;
    1188:	1e 82       	std	Y+6, r1	; 0x06
	set_led_color(&temp);
    118a:	ce 01       	movw	r24, r28
    118c:	04 96       	adiw	r24, 0x04	; 4
    118e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    1192:	8c eb       	ldi	r24, 0xBC	; 188
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	20 e9       	ldi	r18, 0x90	; 144
    1198:	31 e0       	ldi	r19, 0x01	; 1
    119a:	f9 01       	movw	r30, r18
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <led_sig_ok+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a2:	d9 f7       	brne	.-10     	; 0x119a <led_sig_ok+0x90>
	_delay_ms(70);

	set_led_color(&old);
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
}
    11ac:	26 96       	adiw	r28, 0x06	; 6
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <w1_reset>:

bit w1_reset(void)
{
  bit err;

  W1_OUT &= ~(1<<W1_PIN);
    11be:	95 98       	cbi	0x12, 5	; 18
  W1_DDR |= 1<<W1_PIN;
    11c0:	8d 9a       	sbi	0x11, 5	; 17
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	97 e0       	ldi	r25, 0x07	; 7
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <w1_reset+0x8>
  _delay_us(480);

  W1_DDR &= ~(1<<W1_PIN);
    11ca:	8d 98       	cbi	0x11, 5	; 17
    11cc:	88 e0       	ldi	r24, 0x08	; 8
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <w1_reset+0x12>
  _delay_us(66);
  err = W1_IN & (1<<W1_PIN);			// no presence detect
    11d4:	80 b3       	in	r24, 0x10	; 16
    11d6:	e8 e7       	ldi	r30, 0x78	; 120
    11d8:	f6 e0       	ldi	r31, 0x06	; 6
    11da:	31 97       	sbiw	r30, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <w1_reset+0x1c>

  _delay_us(480-66);
  if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
    11de:	85 99       	sbic	0x10, 5	; 16
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <w1_reset+0x28>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	08 95       	ret
  W1_DDR |= 1<<W1_PIN;
  _delay_us(480);

  W1_DDR &= ~(1<<W1_PIN);
  _delay_us(66);
  err = W1_IN & (1<<W1_PIN);			// no presence detect
    11e6:	80 72       	andi	r24, 0x20	; 32

  _delay_us(480-66);
  if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
    err = 1;
  return err;
}
    11e8:	08 95       	ret

000011ea <w1_bit_io>:
uchar w1_bit_io( bit b )
{

  W1_DDR |= 1<<W1_PIN;
    11ea:	8d 9a       	sbi	0x11, 5	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11ec:	95 e0       	ldi	r25, 0x05	; 5
    11ee:	9a 95       	dec	r25
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <w1_bit_io+0x4>
  _delay_us(1);

  if( b )
    11f2:	81 11       	cpse	r24, r1
    W1_DDR &= ~(1<<W1_PIN);
    11f4:	8d 98       	cbi	0x11, 5	; 17
    11f6:	9a e4       	ldi	r25, 0x4A	; 74
    11f8:	9a 95       	dec	r25
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <w1_bit_io+0xe>
    _delay_us(15-1);

  if( (W1_IN & (1<<W1_PIN)) == 0 )
    11fc:	85 9b       	sbis	0x10, 5	; 16
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 ef       	ldi	r25, 0xF0	; 240
    1202:	9a 95       	dec	r25
    1204:	f1 f7       	brne	.-4      	; 0x1202 <w1_bit_io+0x18>
    b = 0;
    _delay_us(60-15);

  W1_DDR &= ~(1<<W1_PIN);
    1206:	8d 98       	cbi	0x11, 5	; 17

  return b;
}
    1208:	08 95       	ret

0000120a <w1_byte_wr>:


uint w1_byte_wr( uchar b )
{
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	18 2f       	mov	r17, r24
    1210:	08 e0       	ldi	r16, 0x08	; 8
  uchar i = 8, j;
  do{
    j = w1_bit_io( b & 1 );
    1212:	81 2f       	mov	r24, r17
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	0e 94 f5 08 	call	0x11ea	; 0x11ea <w1_bit_io>
    b >>= 1;
    121a:	16 95       	lsr	r17
    if( j )
    121c:	81 11       	cpse	r24, r1
      b |= 0x80;
    121e:	10 68       	ori	r17, 0x80	; 128
  }while( --i );
    1220:	01 50       	subi	r16, 0x01	; 1
    1222:	b9 f7       	brne	.-18     	; 0x1212 <w1_byte_wr+0x8>
  return b;
}
    1224:	81 2f       	mov	r24, r17
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <w1_byte_rd>:


uint w1_byte_rd( void )
{
  return w1_byte_wr( 0xFF );
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
}
    1234:	08 95       	ret

00001236 <w1_rom_search>:


uchar w1_rom_search( uchar diff, uchar idata *id )
{
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	e8 2e       	mov	r14, r24
    1246:	eb 01       	movw	r28, r22
  uchar i, j, next_diff;
  bit b;

  if( w1_reset() )
    1248:	0e 94 df 08 	call	0x11be	; 0x11be <w1_reset>
    124c:	88 23       	and	r24, r24
    124e:	a1 f5       	brne	.+104    	; 0x12b8 <w1_rom_search+0x82>
    return PRESENCE_ERR;			// error, no device found
  w1_byte_wr( SEARCH_ROM );			// ROM search command
    1250:	80 ef       	ldi	r24, 0xF0	; 240
    1252:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
    1256:	80 e4       	ldi	r24, 0x40	; 64
    1258:	ff 24       	eor	r15, r15
    125a:	18 2f       	mov	r17, r24
      w1_bit_io( b );     			// write bit
      *id >>= 1;
      if( b )					// store bit
	*id |= 0x80;
      i--;
    }while( --j );
    125c:	98 ef       	ldi	r25, 0xF8	; 248
    125e:	d9 2e       	mov	r13, r25
    1260:	d8 0e       	add	r13, r24
  next_diff = LAST_DEVICE;			// unchanged on last device
  i = 8 * 8;					// 8 bytes
  do{
    j = 8;					// 8 bits
    do{
      b = w1_bit_io( 1 );			// read bit
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 f5 08 	call	0x11ea	; 0x11ea <w1_bit_io>
    1268:	08 2f       	mov	r16, r24
      if( w1_bit_io( 1 ) ){			// read complement bit
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <w1_bit_io>
    1270:	88 23       	and	r24, r24
    1272:	29 f0       	breq	.+10     	; 0x127e <w1_rom_search+0x48>
	if( b )					// 11
    1274:	00 23       	and	r16, r16
    1276:	71 f0       	breq	.+28     	; 0x1294 <w1_rom_search+0x5e>
    1278:	8e ef       	ldi	r24, 0xFE	; 254
    127a:	f8 2e       	mov	r15, r24
    127c:	1f c0       	rjmp	.+62     	; 0x12bc <w1_rom_search+0x86>
	  return DATA_ERR;			// data error
      }else{
	if( !b ){				// 00 = 2 devices
    127e:	00 23       	and	r16, r16
    1280:	49 f4       	brne	.+18     	; 0x1294 <w1_rom_search+0x5e>
	  if( diff > i ||
    1282:	1e 15       	cp	r17, r14
    1284:	28 f0       	brcs	.+10     	; 0x1290 <w1_rom_search+0x5a>
    1286:	88 81       	ld	r24, Y
    1288:	80 ff       	sbrs	r24, 0
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <w1_rom_search+0x5e>
    128c:	e1 16       	cp	r14, r17
    128e:	11 f0       	breq	.+4      	; 0x1294 <w1_rom_search+0x5e>
    1290:	f1 2e       	mov	r15, r17
    1292:	01 e0       	ldi	r16, 0x01	; 1
	    b = 1;				// now 1
	    next_diff = i;			// next pass 0
	  }
	}
      }
      w1_bit_io( b );     			// write bit
    1294:	80 2f       	mov	r24, r16
    1296:	0e 94 f5 08 	call	0x11ea	; 0x11ea <w1_bit_io>
      *id >>= 1;
    129a:	88 81       	ld	r24, Y
    129c:	86 95       	lsr	r24
    129e:	88 83       	st	Y, r24
      if( b )					// store bit
    12a0:	00 23       	and	r16, r16
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <w1_rom_search+0x72>
	*id |= 0x80;
    12a4:	80 68       	ori	r24, 0x80	; 128
    12a6:	88 83       	st	Y, r24
      i--;
    12a8:	11 50       	subi	r17, 0x01	; 1
    }while( --j );
    12aa:	1d 15       	cp	r17, r13
    12ac:	d1 f6       	brne	.-76     	; 0x1262 <w1_rom_search+0x2c>
    id++;					// next byte
  }while( i );
    12ae:	11 23       	and	r17, r17
    12b0:	29 f0       	breq	.+10     	; 0x12bc <w1_rom_search+0x86>
      *id >>= 1;
      if( b )					// store bit
	*id |= 0x80;
      i--;
    }while( --j );
    id++;					// next byte
    12b2:	21 96       	adiw	r28, 0x01	; 1
    12b4:	81 2f       	mov	r24, r17
    12b6:	d1 cf       	rjmp	.-94     	; 0x125a <w1_rom_search+0x24>
    12b8:	ff 24       	eor	r15, r15
    12ba:	fa 94       	dec	r15
  }while( i );
  return next_diff;				// to continue search
}
    12bc:	8f 2d       	mov	r24, r15
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	08 95       	ret

000012ce <w1_command>:

void w1_command( uchar command, uchar idata *id )
{
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	08 2f       	mov	r16, r24
    12d8:	eb 01       	movw	r28, r22
  uchar i;
  w1_reset();
    12da:	0e 94 df 08 	call	0x11be	; 0x11be <w1_reset>
  if( id ){
    12de:	20 97       	sbiw	r28, 0x00	; 0
    12e0:	51 f0       	breq	.+20     	; 0x12f6 <w1_command+0x28>
    w1_byte_wr( MATCH_ROM );			// to a single device
    12e2:	85 e5       	ldi	r24, 0x55	; 85
    12e4:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
    12e8:	18 e0       	ldi	r17, 0x08	; 8
    i = 8;
    do{
      w1_byte_wr( *id );
    12ea:	89 91       	ld	r24, Y+
    12ec:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
      id++;
    }while( --i );
    12f0:	11 50       	subi	r17, 0x01	; 1
    12f2:	d9 f7       	brne	.-10     	; 0x12ea <w1_command+0x1c>
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <w1_command+0x2e>
  }else{
    w1_byte_wr( SKIP_ROM );			// to all devices
    12f6:	8c ec       	ldi	r24, 0xCC	; 204
    12f8:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
  }
  w1_byte_wr( command );
    12fc:	80 2f       	mov	r24, r16
    12fe:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	08 95       	ret

0000130c <read_meas>:
  }
}


uint read_meas( void )
{
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	28 97       	sbiw	r28, 0x08	; 8
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8f ef       	ldi	r24, 0xFF	; 255
  uchar id[8], diff;
  uchar i;
  uint temp;

  for( diff = SEARCH_FIRST; diff != LAST_DEVICE; ){
    diff = w1_rom_search( diff, id );
    1326:	8e 01       	movw	r16, r28
    1328:	0f 5f       	subi	r16, 0xFF	; 255
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	b8 01       	movw	r22, r16
    132e:	0e 94 1b 09 	call	0x1236	; 0x1236 <w1_rom_search>

    if( diff == PRESENCE_ERR ){
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	f1 f0       	breq	.+60     	; 0x1372 <read_meas+0x66>
      //printf( "No Sensor found" );
      break;
    }
    if( diff == DATA_ERR ){
    1336:	8e 3f       	cpi	r24, 0xFE	; 254
    1338:	e1 f0       	breq	.+56     	; 0x1372 <read_meas+0x66>
      //printf( "Bus Error" );
      break;
    }
    if( id[0] == 0x28 || id[0] == 0x10 ){	// temperature sensor
    133a:	99 81       	ldd	r25, Y+1	; 0x01
    133c:	98 32       	cpi	r25, 0x28	; 40
    133e:	11 f0       	breq	.+4      	; 0x1344 <read_meas+0x38>
    1340:	90 31       	cpi	r25, 0x10	; 16
    1342:	a9 f4       	brne	.+42     	; 0x136e <read_meas+0x62>

      for( i = 0; i < 8; i++ ){
//	printf("%02X", id[i] );    ID

      }
      w1_byte_wr( READ );			// read command
    1344:	8e eb       	ldi	r24, 0xBE	; 190
    1346:	0e 94 05 09 	call	0x120a	; 0x120a <w1_byte_wr>
      temp = w1_byte_rd();			// low byte
    134a:	0e 94 17 09 	call	0x122e	; 0x122e <w1_byte_rd>
    134e:	8c 01       	movw	r16, r24
      temp |= (uint)w1_byte_rd() << 8;		// high byte
    1350:	0e 94 17 09 	call	0x122e	; 0x122e <w1_byte_rd>
    1354:	38 2f       	mov	r19, r24
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	20 2b       	or	r18, r16
    135a:	31 2b       	or	r19, r17
      if( id[0] == 0x10 )			// 9 -> 12 bit
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	80 31       	cpi	r24, 0x10	; 16
    1360:	51 f4       	brne	.+20     	; 0x1376 <read_meas+0x6a>
        temp <<= 3;
    1362:	43 e0       	ldi	r20, 0x03	; 3
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	4a 95       	dec	r20
    136a:	e1 f7       	brne	.-8      	; 0x1364 <read_meas+0x58>
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <read_meas+0x6a>
{
  uchar id[8], diff;
  uchar i;
  uint temp;

  for( diff = SEARCH_FIRST; diff != LAST_DEVICE; ){
    136e:	88 23       	and	r24, r24
    1370:	e9 f6       	brne	.-70     	; 0x132c <read_meas+0x20>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
      return temp;

    }
  }
  return 0;
}
    1376:	c9 01       	movw	r24, r18
    1378:	28 96       	adiw	r28, 0x08	; 8
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <start_meas>:
}



void start_meas( void ){
  if( W1_IN & (1<< W1_PIN)){
    138e:	85 9b       	sbis	0x10, 5	; 16
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <start_meas+0x14>
    w1_command( CONVERT_T, NULL );
    1392:	84 e4       	ldi	r24, 0x44	; 68
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	0e 94 67 09 	call	0x12ce	; 0x12ce <w1_command>
    W1_OUT |= 1<< W1_PIN;
    139c:	95 9a       	sbi	0x12, 5	; 18
    W1_DDR |= 1<< W1_PIN;			// parasite power on
    139e:	8d 9a       	sbi	0x11, 5	; 17
    13a0:	08 95       	ret

  }else{
    uart1_puts("Short Circuit !");
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 6e 05 	call	0xadc	; 0xadc <uart1_puts>
    13aa:	08 95       	ret

000013ac <__vector_13>:
uint8_t run=0;
uint8_t compare[8] 	 = {0,0,0,0,0,0,0,0};
uint8_t td_timers[8] = {0,0,0,0,0,0,0,0};

ISR(TIMER1_COMPA_vect)
{
    13ac:	1f 92       	push	r1
    13ae:	0f 92       	push	r0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	2f 93       	push	r18
    13b8:	8f 93       	push	r24
    13ba:	9f 93       	push	r25
	
	if (run & (1<<0)) 
    13bc:	20 91 bf 01 	lds	r18, 0x01BF
    13c0:	20 ff       	sbrs	r18, 0
    13c2:	11 c0       	rjmp	.+34     	; 0x13e6 <__vector_13+0x3a>
	{
		td_timers[0]++;
    13c4:	80 91 c8 01 	lds	r24, 0x01C8
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	80 93 c8 01 	sts	0x01C8, r24
		if (compare[0] == td_timers[0] ) 
    13ce:	90 91 c0 01 	lds	r25, 0x01C0
    13d2:	98 17       	cp	r25, r24
    13d4:	41 f4       	brne	.+16     	; 0x13e6 <__vector_13+0x3a>
		{
			timeout |= (1<<0);
    13d6:	80 91 be 01 	lds	r24, 0x01BE
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<0);
    13e0:	2e 7f       	andi	r18, 0xFE	; 254
    13e2:	20 93 bf 01 	sts	0x01BF, r18
		}
	}

	if (run & (1<<1)) 
    13e6:	20 91 bf 01 	lds	r18, 0x01BF
    13ea:	21 ff       	sbrs	r18, 1
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <__vector_13+0x64>
	{
		td_timers[1]++;
    13ee:	80 91 c9 01 	lds	r24, 0x01C9
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	80 93 c9 01 	sts	0x01C9, r24
		if (compare[1] == td_timers[1])
    13f8:	90 91 c1 01 	lds	r25, 0x01C1
    13fc:	98 17       	cp	r25, r24
    13fe:	41 f4       	brne	.+16     	; 0x1410 <__vector_13+0x64>
		{	
			timeout |= (1<<1);
    1400:	80 91 be 01 	lds	r24, 0x01BE
    1404:	82 60       	ori	r24, 0x02	; 2
    1406:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<1);
    140a:	2d 7f       	andi	r18, 0xFD	; 253
    140c:	20 93 bf 01 	sts	0x01BF, r18
		}
	}
	
	if (run & (1<<2))
    1410:	20 91 bf 01 	lds	r18, 0x01BF
    1414:	22 ff       	sbrs	r18, 2
    1416:	11 c0       	rjmp	.+34     	; 0x143a <__vector_13+0x8e>
	{
		td_timers[2]++;
    1418:	80 91 ca 01 	lds	r24, 0x01CA
    141c:	8f 5f       	subi	r24, 0xFF	; 255
    141e:	80 93 ca 01 	sts	0x01CA, r24
		if (compare[2] == td_timers[2])
    1422:	90 91 c2 01 	lds	r25, 0x01C2
    1426:	98 17       	cp	r25, r24
    1428:	41 f4       	brne	.+16     	; 0x143a <__vector_13+0x8e>
		{
			timeout |= (1<<2);
    142a:	80 91 be 01 	lds	r24, 0x01BE
    142e:	84 60       	ori	r24, 0x04	; 4
    1430:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<2);
    1434:	2b 7f       	andi	r18, 0xFB	; 251
    1436:	20 93 bf 01 	sts	0x01BF, r18
		}
	}

	if (run & (1<<3))
    143a:	20 91 bf 01 	lds	r18, 0x01BF
    143e:	23 ff       	sbrs	r18, 3
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <__vector_13+0xb8>
	{
		td_timers[3]++;
    1442:	80 91 cb 01 	lds	r24, 0x01CB
    1446:	8f 5f       	subi	r24, 0xFF	; 255
    1448:	80 93 cb 01 	sts	0x01CB, r24
		if (compare[3] == td_timers[3])
    144c:	90 91 c3 01 	lds	r25, 0x01C3
    1450:	98 17       	cp	r25, r24
    1452:	41 f4       	brne	.+16     	; 0x1464 <__vector_13+0xb8>
		{
			timeout |= (1<<3);
    1454:	80 91 be 01 	lds	r24, 0x01BE
    1458:	88 60       	ori	r24, 0x08	; 8
    145a:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<3);
    145e:	27 7f       	andi	r18, 0xF7	; 247
    1460:	20 93 bf 01 	sts	0x01BF, r18
		}
	}
	
	if (run & (1<<4))
    1464:	20 91 bf 01 	lds	r18, 0x01BF
    1468:	24 ff       	sbrs	r18, 4
    146a:	11 c0       	rjmp	.+34     	; 0x148e <__vector_13+0xe2>
	{
		td_timers[4]++;
    146c:	80 91 cc 01 	lds	r24, 0x01CC
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 cc 01 	sts	0x01CC, r24
		if (compare[4] == td_timers[4])
    1476:	90 91 c4 01 	lds	r25, 0x01C4
    147a:	98 17       	cp	r25, r24
    147c:	41 f4       	brne	.+16     	; 0x148e <__vector_13+0xe2>
		{
			timeout |= (1<<4);
    147e:	80 91 be 01 	lds	r24, 0x01BE
    1482:	80 61       	ori	r24, 0x10	; 16
    1484:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<4);
    1488:	2f 7e       	andi	r18, 0xEF	; 239
    148a:	20 93 bf 01 	sts	0x01BF, r18
		}
	}
	
	if (run & (1<<5))
    148e:	20 91 bf 01 	lds	r18, 0x01BF
    1492:	25 ff       	sbrs	r18, 5
    1494:	11 c0       	rjmp	.+34     	; 0x14b8 <__vector_13+0x10c>
	{
		td_timers[5]++;
    1496:	80 91 cd 01 	lds	r24, 0x01CD
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 cd 01 	sts	0x01CD, r24
		if (compare[5] == td_timers[5])
    14a0:	90 91 c5 01 	lds	r25, 0x01C5
    14a4:	98 17       	cp	r25, r24
    14a6:	41 f4       	brne	.+16     	; 0x14b8 <__vector_13+0x10c>
		{
			timeout |= (1<<5);
    14a8:	80 91 be 01 	lds	r24, 0x01BE
    14ac:	80 62       	ori	r24, 0x20	; 32
    14ae:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<5);
    14b2:	2f 7d       	andi	r18, 0xDF	; 223
    14b4:	20 93 bf 01 	sts	0x01BF, r18
		}
	}
	
	if (run & (1<<6))
    14b8:	20 91 bf 01 	lds	r18, 0x01BF
    14bc:	26 ff       	sbrs	r18, 6
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <__vector_13+0x136>
	{
		td_timers[6]++;
    14c0:	80 91 ce 01 	lds	r24, 0x01CE
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	80 93 ce 01 	sts	0x01CE, r24
		if (compare[6] == td_timers[6])
    14ca:	90 91 c6 01 	lds	r25, 0x01C6
    14ce:	98 17       	cp	r25, r24
    14d0:	41 f4       	brne	.+16     	; 0x14e2 <__vector_13+0x136>
		{
			timeout |= (1<<6);
    14d2:	80 91 be 01 	lds	r24, 0x01BE
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<6);
    14dc:	2f 7b       	andi	r18, 0xBF	; 191
    14de:	20 93 bf 01 	sts	0x01BF, r18
		}
	}
	
	if (run & (1<<7))
    14e2:	20 91 bf 01 	lds	r18, 0x01BF
    14e6:	27 ff       	sbrs	r18, 7
    14e8:	11 c0       	rjmp	.+34     	; 0x150c <__vector_13+0x160>
	{
		td_timers[7]++;
    14ea:	80 91 cf 01 	lds	r24, 0x01CF
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	80 93 cf 01 	sts	0x01CF, r24
		if (compare[7] == td_timers[7])
    14f4:	90 91 c7 01 	lds	r25, 0x01C7
    14f8:	98 17       	cp	r25, r24
    14fa:	41 f4       	brne	.+16     	; 0x150c <__vector_13+0x160>
		{
			timeout |= (1<<7);
    14fc:	80 91 be 01 	lds	r24, 0x01BE
    1500:	80 68       	ori	r24, 0x80	; 128
    1502:	80 93 be 01 	sts	0x01BE, r24
			run &= ~(1<<7);
    1506:	2f 77       	andi	r18, 0x7F	; 127
    1508:	20 93 bf 01 	sts	0x01BF, r18
		}
	}
}
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	2f 91       	pop	r18
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <td_init>:

void td_init()
{
	TCNT1 = (uint16_t)0;		//Zälregister 16bit Timer 3 zurücksetzen
    151c:	1d bc       	out	0x2d, r1	; 45
    151e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = (uint16_t)62500;	//Nächster interupt in 1s
    1520:	84 e2       	ldi	r24, 0x24	; 36
    1522:	94 ef       	ldi	r25, 0xF4	; 244
    1524:	9b bd       	out	0x2b, r25	; 43
    1526:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1<<OCIE1A);		//Interrupt freischalten
    1528:	89 b7       	in	r24, 0x39	; 57
    152a:	80 64       	ori	r24, 0x40	; 64
    152c:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1<<CS12) | (1<<WGM12);
    152e:	8e b5       	in	r24, 0x2e	; 46
    1530:	8c 60       	ori	r24, 0x0C	; 12
    1532:	8e bd       	out	0x2e, r24	; 46
}
    1534:	08 95       	ret

00001536 <td_setTimer>:

void td_setTimer(uint8_t index, uint8_t sec)
{
	if (index > 7) index = 7;
	
	td_timers[index] = 0;
    1536:	88 30       	cpi	r24, 0x08	; 8
    1538:	08 f0       	brcs	.+2      	; 0x153c <td_setTimer+0x6>
    153a:	87 e0       	ldi	r24, 0x07	; 7
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	fc 01       	movw	r30, r24
    1540:	e8 53       	subi	r30, 0x38	; 56
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	10 82       	st	Z, r1
	
	compare[index] = sec;
    1546:	fc 01       	movw	r30, r24
    1548:	e0 54       	subi	r30, 0x40	; 64
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	60 83       	st	Z, r22
	timeout &= ~(1<<index);
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <td_setTimer+0x22>
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <td_setTimer+0x1e>
    155c:	92 2f       	mov	r25, r18
    155e:	90 95       	com	r25
    1560:	80 91 be 01 	lds	r24, 0x01BE
    1564:	89 23       	and	r24, r25
    1566:	80 93 be 01 	sts	0x01BE, r24
	run |= (1<<index);			
    156a:	80 91 bf 01 	lds	r24, 0x01BF
    156e:	82 2b       	or	r24, r18
    1570:	80 93 bf 01 	sts	0x01BF, r24
}
    1574:	08 95       	ret

00001576 <td_timeout>:

uint8_t td_timeout(uint8_t index)
{
    1576:	28 2f       	mov	r18, r24
	if (timeout & (1<<index))
    1578:	30 91 be 01 	lds	r19, 0x01BE
    157c:	83 2f       	mov	r24, r19
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <td_timeout+0x12>
    1584:	95 95       	asr	r25
    1586:	87 95       	ror	r24
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <td_timeout+0xe>
    158c:	80 fd       	sbrc	r24, 0
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <td_timeout+0x1e>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	08 95       	ret
	{
		
		timeout &= ~(1<<index);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <td_timeout+0x28>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	2a 95       	dec	r18
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <td_timeout+0x24>
    15a2:	80 95       	com	r24
    15a4:	83 23       	and	r24, r19
    15a6:	80 93 be 01 	sts	0x01BE, r24
    15aa:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	
	return 0;
}
    15ac:	08 95       	ret

000015ae <script_NewEntry>:
	_script.state = scrsta_running;
}

//Fügt 
void script_NewEntry(struct script_command cmd)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <script_NewEntry+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <script_NewEntry+0x8>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <script_NewEntry+0xa>
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	49 83       	std	Y+1, r20	; 0x01
    15be:	5a 83       	std	Y+2, r21	; 0x02
    15c0:	6b 83       	std	Y+3, r22	; 0x03
    15c2:	7c 83       	std	Y+4, r23	; 0x04
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	9e 83       	std	Y+6, r25	; 0x06
	_script.command[_script.count] = cmd;
    15c8:	80 91 d1 01 	lds	r24, 0x01D1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	fc 01       	movw	r30, r24
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	e8 0f       	add	r30, r24
    15d6:	f9 1f       	adc	r31, r25
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	ed 52       	subi	r30, 0x2D	; 45
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	de 01       	movw	r26, r28
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	86 e0       	ldi	r24, 0x06	; 6
    15e6:	0d 90       	ld	r0, X+
    15e8:	01 92       	st	Z+, r0
    15ea:	81 50       	subi	r24, 0x01	; 1
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <script_NewEntry+0x38>
	_script.count++;
    15ee:	80 91 d1 01 	lds	r24, 0x01D1
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	80 93 d1 01 	sts	0x01D1, r24
	
}
    15f8:	26 96       	adiw	r28, 0x06	; 6
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <script_handler>:
	_script.pos = 0;
}


void script_handler(uint8_t *Comand)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <script_handler+0x6>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <script_handler+0x8>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <script_handler+0xa>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	fc 01       	movw	r30, r24
	//cmd[0] ist immer das Scriptkomando
	uint8_t cmd = Comand[1];
    161a:	41 81       	ldd	r20, Z+1	; 0x01
	
	switch (cmd)
    161c:	41 30       	cpi	r20, 0x01	; 1
    161e:	29 f0       	breq	.+10     	; 0x162a <script_handler+0x20>
    1620:	41 30       	cpi	r20, 0x01	; 1
    1622:	50 f0       	brcs	.+20     	; 0x1638 <script_handler+0x2e>
    1624:	48 30       	cpi	r20, 0x08	; 8
    1626:	81 f4       	brne	.+32     	; 0x1648 <script_handler+0x3e>
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <script_handler+0x26>
	{
		//Startet die Abarbeitung der Befehle
		case scrcmd_exec:
			_script.state = scrsta_start;
    162a:	10 92 d0 01 	sts	0x01D0, r1
    162e:	1d c0       	rjmp	.+58     	; 0x166a <script_handler+0x60>
			break;
		
		//Stoppt die Abarbeitung der Befehle
		case scrcmd_stop:
			_script.state = scrsta_stop;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	80 93 d0 01 	sts	0x01D0, r24
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <script_handler+0x38>
			_script.pos = 0;
			break;
		
		case scrcmd_init:
			_script.state = scrsta_init;
    1638:	84 e0       	ldi	r24, 0x04	; 4
    163a:	80 93 d0 01 	sts	0x01D0, r24
			_script.count = 0;
    163e:	10 92 d1 01 	sts	0x01D1, r1
			_script.pos = 0;
    1642:	10 92 d2 01 	sts	0x01D2, r1
    1646:	11 c0       	rjmp	.+34     	; 0x166a <script_handler+0x60>
			break;
		
		//Fügt einen neuen Befehl an
		default:
			if (_script.state == scrsta_init)
    1648:	80 91 d0 01 	lds	r24, 0x01D0
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	69 f4       	brne	.+26     	; 0x166a <script_handler+0x60>
			{
				struct script_command temp;
				temp.cmd = cmd;
    1650:	49 83       	std	Y+1, r20	; 0x01
				temp.param1 = Comand[2];
    1652:	52 81       	ldd	r21, Z+2	; 0x02
    1654:	5a 83       	std	Y+2, r21	; 0x02
				temp.param2 = Comand[3];
    1656:	63 81       	ldd	r22, Z+3	; 0x03
    1658:	6b 83       	std	Y+3, r22	; 0x03
				temp.param3 = Comand[4];
    165a:	74 81       	ldd	r23, Z+4	; 0x04
    165c:	7c 83       	std	Y+4, r23	; 0x04
				temp.param4 = Comand[5];
    165e:	85 81       	ldd	r24, Z+5	; 0x05
    1660:	8d 83       	std	Y+5, r24	; 0x05
				temp.param5 = Comand[6];
    1662:	96 81       	ldd	r25, Z+6	; 0x06
    1664:	9e 83       	std	Y+6, r25	; 0x06
				script_NewEntry(temp);
    1666:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <script_NewEntry>
			}
	}
}
    166a:	26 96       	adiw	r28, 0x06	; 6
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <comand_handler>:

//Behandelt das jeweils nächste Komando 
//im Struct
void comand_handler(struct script_command cmd)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	29 97       	sbiw	r28, 0x09	; 9
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	e4 2f       	mov	r30, r20
    1692:	4c 83       	std	Y+4, r20	; 0x04
    1694:	5d 83       	std	Y+5, r21	; 0x05
    1696:	36 2f       	mov	r19, r22
    1698:	6e 83       	std	Y+6, r22	; 0x06
    169a:	27 2f       	mov	r18, r23
    169c:	7f 83       	std	Y+7, r23	; 0x07
    169e:	88 87       	std	Y+8, r24	; 0x08
    16a0:	99 87       	std	Y+9, r25	; 0x09
    16a2:	65 2f       	mov	r22, r21
    16a4:	73 2f       	mov	r23, r19
    16a6:	f2 2f       	mov	r31, r18
	struct rgb color;
	
	switch (cmd.cmd)
    16a8:	e5 30       	cpi	r30, 0x05	; 5
    16aa:	e1 f0       	breq	.+56     	; 0x16e4 <comand_handler+0x68>
    16ac:	e6 30       	cpi	r30, 0x06	; 6
    16ae:	38 f4       	brcc	.+14     	; 0x16be <comand_handler+0x42>
    16b0:	e3 30       	cpi	r30, 0x03	; 3
    16b2:	69 f0       	breq	.+26     	; 0x16ce <comand_handler+0x52>
    16b4:	e4 30       	cpi	r30, 0x04	; 4
    16b6:	70 f4       	brcc	.+28     	; 0x16d4 <comand_handler+0x58>
    16b8:	e2 30       	cpi	r30, 0x02	; 2
    16ba:	49 f5       	brne	.+82     	; 0x170e <comand_handler+0x92>
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <comand_handler+0x4c>
    16be:	e7 30       	cpi	r30, 0x07	; 7
    16c0:	31 f1       	breq	.+76     	; 0x170e <comand_handler+0x92>
    16c2:	e7 30       	cpi	r30, 0x07	; 7
    16c4:	98 f0       	brcs	.+38     	; 0x16ec <comand_handler+0x70>
    16c6:	23 c0       	rjmp	.+70     	; 0x170e <comand_handler+0x92>
	{
		case scrcmd_on:
			led_on();
    16c8:	0e 94 e5 05 	call	0xbca	; 0xbca <led_on>
    16cc:	20 c0       	rjmp	.+64     	; 0x170e <comand_handler+0x92>
			break;
		
		case scrcmd_off:
			led_off();
    16ce:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <led_off>
    16d2:	1d c0       	rjmp	.+58     	; 0x170e <comand_handler+0x92>
			break;
		
		case scrcmd_set:
			color.Red = cmd.param1;
    16d4:	59 83       	std	Y+1, r21	; 0x01
			color.Green = cmd.param2;
    16d6:	3a 83       	std	Y+2, r19	; 0x02
			color.Blue = cmd.param3;
    16d8:	2b 83       	std	Y+3, r18	; 0x03
			set_led_color(&color);
    16da:	ce 01       	movw	r24, r28
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <set_led_color>
    16e2:	15 c0       	rjmp	.+42     	; 0x170e <comand_handler+0x92>
			break;
		
		case scrcmd_wait:	
			td_setTimer(0,cmd.param1);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <td_setTimer>
    16ea:	11 c0       	rjmp	.+34     	; 0x170e <comand_handler+0x92>
			break;		
		
		case scrcmd_fade:	
			color.Red = cmd.param1;
    16ec:	59 83       	std	Y+1, r21	; 0x01
			color.Green = cmd.param2;
    16ee:	3a 83       	std	Y+2, r19	; 0x02
			color.Blue = cmd.param3;
    16f0:	2b 83       	std	Y+3, r18	; 0x03
			rgb_fade_int(color, (uint16_t)cmd.param3 * 1000); //In sekunden
    16f2:	82 2f       	mov	r24, r18
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	28 ee       	ldi	r18, 0xE8	; 232
    16f8:	33 e0       	ldi	r19, 0x03	; 3
    16fa:	82 9f       	mul	r24, r18
    16fc:	a0 01       	movw	r20, r0
    16fe:	83 9f       	mul	r24, r19
    1700:	50 0d       	add	r21, r0
    1702:	92 9f       	mul	r25, r18
    1704:	50 0d       	add	r21, r0
    1706:	11 24       	eor	r1, r1
    1708:	8f 2f       	mov	r24, r31
    170a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <rgb_fade_int>
		
		case scrcmd_stop:
			_script.state = scrsta_stop;
			break;
	}
	_script.state = scrsta_running;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	80 93 d0 01 	sts	0x01D0, r24
}
    1714:	29 96       	adiw	r28, 0x09	; 9
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <script_tick>:
}


void script_tick()
{
	uart1_putc('T');
    1726:	84 e5       	ldi	r24, 0x54	; 84
    1728:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	uart1_putc(_script.state);
    172c:	80 91 d0 01 	lds	r24, 0x01D0
    1730:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	uart1_putc(_script.count);
    1734:	80 91 d1 01 	lds	r24, 0x01D1
    1738:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	uart1_putc(_script.pos);
    173c:	80 91 d2 01 	lds	r24, 0x01D2
    1740:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	uart1_putc(_script.command[_script.pos].cmd);
    1744:	80 91 d2 01 	lds	r24, 0x01D2
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	fc 01       	movw	r30, r24
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	e8 0f       	add	r30, r24
    1752:	f9 1f       	adc	r31, r25
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	e0 53       	subi	r30, 0x30	; 48
    175a:	fe 4f       	sbci	r31, 0xFE	; 254
    175c:	83 81       	ldd	r24, Z+3	; 0x03
    175e:	0e 94 5c 05 	call	0xab8	; 0xab8 <uart1_putc>
	
	
	
	if (_script.state == scrsta_start)
    1762:	80 91 d0 01 	lds	r24, 0x01D0
    1766:	88 23       	and	r24, r24
    1768:	99 f4       	brne	.+38     	; 0x1790 <script_tick+0x6a>
	{
		_script.pos = 0;								//Zeiger auf ersten Befehl setzend
    176a:	10 92 d2 01 	sts	0x01D2, r1
		_script.state = scrsta_running;					//Statemachine starten
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 93 d0 01 	sts	0x01D0, r24
		comand_handler(_script.command[_script.pos]);	//Ersten Befehl ausführen
    1774:	40 91 d3 01 	lds	r20, 0x01D3
    1778:	50 91 d4 01 	lds	r21, 0x01D4
    177c:	60 91 d5 01 	lds	r22, 0x01D5
    1780:	70 91 d6 01 	lds	r23, 0x01D6
    1784:	80 91 d7 01 	lds	r24, 0x01D7
    1788:	90 91 d8 01 	lds	r25, 0x01D8
    178c:	0e 94 3e 0b 	call	0x167c	; 0x167c <comand_handler>
	}
	
	if (_script.state == scrsta_next)
    1790:	80 91 d0 01 	lds	r24, 0x01D0
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	19 f5       	brne	.+70     	; 0x17de <script_tick+0xb8>
	{
		_script.pos++;					//Zeiger auf nächsten Befehl setzen
    1798:	90 91 d2 01 	lds	r25, 0x01D2
    179c:	9f 5f       	subi	r25, 0xFF	; 255
    179e:	90 93 d2 01 	sts	0x01D2, r25
		if (_script.pos > _script.count)
    17a2:	80 91 d1 01 	lds	r24, 0x01D1
    17a6:	89 17       	cp	r24, r25
    17a8:	20 f4       	brcc	.+8      	; 0x17b2 <script_tick+0x8c>
		{
			_script.state = scrsta_stop;
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	80 93 d0 01 	sts	0x01D0, r24
    17b0:	08 95       	ret
			return;			
		}
		
		_script.state = scrsta_running;	//Zustand starten
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	80 93 d0 01 	sts	0x01D0, r24
		comand_handler(_script.command[_script.pos]); //Befehl ausführen
    17b8:	89 2f       	mov	r24, r25
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	e8 0f       	add	r30, r24
    17c4:	f9 1f       	adc	r31, r25
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	ed 52       	subi	r30, 0x2D	; 45
    17cc:	fe 4f       	sbci	r31, 0xFE	; 254
    17ce:	40 81       	ld	r20, Z
    17d0:	51 81       	ldd	r21, Z+1	; 0x01
    17d2:	62 81       	ldd	r22, Z+2	; 0x02
    17d4:	73 81       	ldd	r23, Z+3	; 0x03
    17d6:	84 81       	ldd	r24, Z+4	; 0x04
    17d8:	95 81       	ldd	r25, Z+5	; 0x05
    17da:	0e 94 3e 0b 	call	0x167c	; 0x167c <comand_handler>
	}
	
	if (_script.state == scrsta_running)
    17de:	80 91 d0 01 	lds	r24, 0x01D0
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	99 f5       	brne	.+102    	; 0x184c <script_tick+0x126>
	{
		if (_script.command[_script.pos].cmd == scrcmd_on)
    17e6:	80 91 d2 01 	lds	r24, 0x01D2
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	fc 01       	movw	r30, r24
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	e8 0f       	add	r30, r24
    17f4:	f9 1f       	adc	r31, r25
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	e0 53       	subi	r30, 0x30	; 48
    17fc:	fe 4f       	sbci	r31, 0xFE	; 254
    17fe:	83 81       	ldd	r24, Z+3	; 0x03
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	59 f0       	breq	.+22     	; 0x181a <script_tick+0xf4>
			_script.state = scrsta_next;
			
		if (_script.command[_script.pos].cmd == scrcmd_off)
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	51 f0       	breq	.+20     	; 0x181c <script_tick+0xf6>
			_script.state = scrsta_next;
			
		if (_script.command[_script.pos].cmd == scrcmd_set)
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	39 f0       	breq	.+14     	; 0x181a <script_tick+0xf4>
			_script.state = scrsta_next;
			
		if (_script.command[_script.pos].cmd == scrcmd_wait)
    180c:	85 30       	cpi	r24, 0x05	; 5
    180e:	41 f4       	brne	.+16     	; 0x1820 <script_tick+0xfa>
		{
			if (td_timeout(0)) _script.state = scrsta_next;
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	0e 94 bb 0a 	call	0x1576	; 0x1576 <td_timeout>
    1816:	88 23       	and	r24, r24
    1818:	19 f0       	breq	.+6      	; 0x1820 <script_tick+0xfa>
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	80 93 d0 01 	sts	0x01D0, r24
		}
		
		if (_script.command[_script.pos].cmd == scrcmd_fade)
    1820:	80 91 d2 01 	lds	r24, 0x01D2
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	fc 01       	movw	r30, r24
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	e8 0f       	add	r30, r24
    182e:	f9 1f       	adc	r31, r25
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	e0 53       	subi	r30, 0x30	; 48
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	83 81       	ldd	r24, Z+3	; 0x03
    183a:	86 30       	cpi	r24, 0x06	; 6
    183c:	39 f4       	brne	.+14     	; 0x184c <script_tick+0x126>
		{
			if (fade_state() == fader_idle) _script.state = scrsta_next;
    183e:	0e 94 a8 07 	call	0xf50	; 0xf50 <fade_state>
    1842:	88 23       	and	r24, r24
    1844:	19 f4       	brne	.+6      	; 0x184c <script_tick+0x126>
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	80 93 d0 01 	sts	0x01D0, r24
    184c:	08 95       	ret

0000184e <script_init>:
	struct script_command command[10];
} _script;

void script_init()
{
	uart1_puts("i");
    184e:	82 e1       	ldi	r24, 0x12	; 18
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 6e 05 	call	0xadc	; 0xadc <uart1_puts>
	_script.state = scrsta_stop;
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	80 93 d0 01 	sts	0x01D0, r24
	_script.count = 0;
    185c:	10 92 d1 01 	sts	0x01D1, r1
	_script.pos = 0;
    1860:	10 92 d2 01 	sts	0x01D2, r1
}
    1864:	08 95       	ret

00001866 <__udivmodhi4>:
    1866:	aa 1b       	sub	r26, r26
    1868:	bb 1b       	sub	r27, r27
    186a:	51 e1       	ldi	r21, 0x11	; 17
    186c:	07 c0       	rjmp	.+14     	; 0x187c <__udivmodhi4_ep>

0000186e <__udivmodhi4_loop>:
    186e:	aa 1f       	adc	r26, r26
    1870:	bb 1f       	adc	r27, r27
    1872:	a6 17       	cp	r26, r22
    1874:	b7 07       	cpc	r27, r23
    1876:	10 f0       	brcs	.+4      	; 0x187c <__udivmodhi4_ep>
    1878:	a6 1b       	sub	r26, r22
    187a:	b7 0b       	sbc	r27, r23

0000187c <__udivmodhi4_ep>:
    187c:	88 1f       	adc	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	5a 95       	dec	r21
    1882:	a9 f7       	brne	.-22     	; 0x186e <__udivmodhi4_loop>
    1884:	80 95       	com	r24
    1886:	90 95       	com	r25
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	08 95       	ret

0000188e <__divmodhi4>:
    188e:	97 fb       	bst	r25, 7
    1890:	09 2e       	mov	r0, r25
    1892:	07 26       	eor	r0, r23
    1894:	0a d0       	rcall	.+20     	; 0x18aa <__divmodhi4_neg1>
    1896:	77 fd       	sbrc	r23, 7
    1898:	04 d0       	rcall	.+8      	; 0x18a2 <__divmodhi4_neg2>
    189a:	e5 df       	rcall	.-54     	; 0x1866 <__udivmodhi4>
    189c:	06 d0       	rcall	.+12     	; 0x18aa <__divmodhi4_neg1>
    189e:	00 20       	and	r0, r0
    18a0:	1a f4       	brpl	.+6      	; 0x18a8 <__divmodhi4_exit>

000018a2 <__divmodhi4_neg2>:
    18a2:	70 95       	com	r23
    18a4:	61 95       	neg	r22
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255

000018a8 <__divmodhi4_exit>:
    18a8:	08 95       	ret

000018aa <__divmodhi4_neg1>:
    18aa:	f6 f7       	brtc	.-4      	; 0x18a8 <__divmodhi4_exit>
    18ac:	90 95       	com	r25
    18ae:	81 95       	neg	r24
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	08 95       	ret

000018b4 <__divmodsi4>:
    18b4:	97 fb       	bst	r25, 7
    18b6:	09 2e       	mov	r0, r25
    18b8:	05 26       	eor	r0, r21
    18ba:	0e d0       	rcall	.+28     	; 0x18d8 <__divmodsi4_neg1>
    18bc:	57 fd       	sbrc	r21, 7
    18be:	04 d0       	rcall	.+8      	; 0x18c8 <__divmodsi4_neg2>
    18c0:	14 d0       	rcall	.+40     	; 0x18ea <__udivmodsi4>
    18c2:	0a d0       	rcall	.+20     	; 0x18d8 <__divmodsi4_neg1>
    18c4:	00 1c       	adc	r0, r0
    18c6:	38 f4       	brcc	.+14     	; 0x18d6 <__divmodsi4_exit>

000018c8 <__divmodsi4_neg2>:
    18c8:	50 95       	com	r21
    18ca:	40 95       	com	r20
    18cc:	30 95       	com	r19
    18ce:	21 95       	neg	r18
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	4f 4f       	sbci	r20, 0xFF	; 255
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255

000018d6 <__divmodsi4_exit>:
    18d6:	08 95       	ret

000018d8 <__divmodsi4_neg1>:
    18d8:	f6 f7       	brtc	.-4      	; 0x18d6 <__divmodsi4_exit>
    18da:	90 95       	com	r25
    18dc:	80 95       	com	r24
    18de:	70 95       	com	r23
    18e0:	61 95       	neg	r22
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	08 95       	ret

000018ea <__udivmodsi4>:
    18ea:	a1 e2       	ldi	r26, 0x21	; 33
    18ec:	1a 2e       	mov	r1, r26
    18ee:	aa 1b       	sub	r26, r26
    18f0:	bb 1b       	sub	r27, r27
    18f2:	fd 01       	movw	r30, r26
    18f4:	0d c0       	rjmp	.+26     	; 0x1910 <__udivmodsi4_ep>

000018f6 <__udivmodsi4_loop>:
    18f6:	aa 1f       	adc	r26, r26
    18f8:	bb 1f       	adc	r27, r27
    18fa:	ee 1f       	adc	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	a2 17       	cp	r26, r18
    1900:	b3 07       	cpc	r27, r19
    1902:	e4 07       	cpc	r30, r20
    1904:	f5 07       	cpc	r31, r21
    1906:	20 f0       	brcs	.+8      	; 0x1910 <__udivmodsi4_ep>
    1908:	a2 1b       	sub	r26, r18
    190a:	b3 0b       	sbc	r27, r19
    190c:	e4 0b       	sbc	r30, r20
    190e:	f5 0b       	sbc	r31, r21

00001910 <__udivmodsi4_ep>:
    1910:	66 1f       	adc	r22, r22
    1912:	77 1f       	adc	r23, r23
    1914:	88 1f       	adc	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	1a 94       	dec	r1
    191a:	69 f7       	brne	.-38     	; 0x18f6 <__udivmodsi4_loop>
    191c:	60 95       	com	r22
    191e:	70 95       	com	r23
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	9b 01       	movw	r18, r22
    1926:	ac 01       	movw	r20, r24
    1928:	bd 01       	movw	r22, r26
    192a:	cf 01       	movw	r24, r30
    192c:	08 95       	ret

0000192e <memmove>:
    192e:	68 17       	cp	r22, r24
    1930:	79 07       	cpc	r23, r25
    1932:	68 f4       	brcc	.+26     	; 0x194e <memmove+0x20>
    1934:	fb 01       	movw	r30, r22
    1936:	dc 01       	movw	r26, r24
    1938:	e4 0f       	add	r30, r20
    193a:	f5 1f       	adc	r31, r21
    193c:	a4 0f       	add	r26, r20
    193e:	b5 1f       	adc	r27, r21
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <memmove+0x18>
    1942:	02 90       	ld	r0, -Z
    1944:	0e 92       	st	-X, r0
    1946:	41 50       	subi	r20, 0x01	; 1
    1948:	50 40       	sbci	r21, 0x00	; 0
    194a:	d8 f7       	brcc	.-10     	; 0x1942 <memmove+0x14>
    194c:	08 95       	ret
    194e:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <memcpy>

00001952 <itoa>:
    1952:	fb 01       	movw	r30, r22
    1954:	9f 01       	movw	r18, r30
    1956:	e8 94       	clt
    1958:	42 30       	cpi	r20, 0x02	; 2
    195a:	c4 f0       	brlt	.+48     	; 0x198c <itoa+0x3a>
    195c:	45 32       	cpi	r20, 0x25	; 37
    195e:	b4 f4       	brge	.+44     	; 0x198c <itoa+0x3a>
    1960:	4a 30       	cpi	r20, 0x0A	; 10
    1962:	29 f4       	brne	.+10     	; 0x196e <itoa+0x1c>
    1964:	97 fb       	bst	r25, 7
    1966:	1e f4       	brtc	.+6      	; 0x196e <itoa+0x1c>
    1968:	90 95       	com	r25
    196a:	81 95       	neg	r24
    196c:	9f 4f       	sbci	r25, 0xFF	; 255
    196e:	64 2f       	mov	r22, r20
    1970:	77 27       	eor	r23, r23
    1972:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
    1976:	80 5d       	subi	r24, 0xD0	; 208
    1978:	8a 33       	cpi	r24, 0x3A	; 58
    197a:	0c f0       	brlt	.+2      	; 0x197e <itoa+0x2c>
    197c:	89 5d       	subi	r24, 0xD9	; 217
    197e:	81 93       	st	Z+, r24
    1980:	cb 01       	movw	r24, r22
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	a1 f7       	brne	.-24     	; 0x196e <itoa+0x1c>
    1986:	16 f4       	brtc	.+4      	; 0x198c <itoa+0x3a>
    1988:	5d e2       	ldi	r21, 0x2D	; 45
    198a:	51 93       	st	Z+, r21
    198c:	10 82       	st	Z, r1
    198e:	c9 01       	movw	r24, r18
    1990:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <strrev>

00001994 <memcpy>:
    1994:	fb 01       	movw	r30, r22
    1996:	dc 01       	movw	r26, r24
    1998:	02 c0       	rjmp	.+4      	; 0x199e <memcpy+0xa>
    199a:	01 90       	ld	r0, Z+
    199c:	0d 92       	st	X+, r0
    199e:	41 50       	subi	r20, 0x01	; 1
    19a0:	50 40       	sbci	r21, 0x00	; 0
    19a2:	d8 f7       	brcc	.-10     	; 0x199a <memcpy+0x6>
    19a4:	08 95       	ret

000019a6 <strrev>:
    19a6:	dc 01       	movw	r26, r24
    19a8:	fc 01       	movw	r30, r24
    19aa:	67 2f       	mov	r22, r23
    19ac:	71 91       	ld	r23, Z+
    19ae:	77 23       	and	r23, r23
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <strrev+0x4>
    19b2:	32 97       	sbiw	r30, 0x02	; 2
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <strrev+0x18>
    19b6:	7c 91       	ld	r23, X
    19b8:	6d 93       	st	X+, r22
    19ba:	70 83       	st	Z, r23
    19bc:	62 91       	ld	r22, -Z
    19be:	ae 17       	cp	r26, r30
    19c0:	bf 07       	cpc	r27, r31
    19c2:	c8 f3       	brcs	.-14     	; 0x19b6 <strrev+0x10>
    19c4:	08 95       	ret

000019c6 <_exit>:
    19c6:	f8 94       	cli

000019c8 <__stop_program>:
    19c8:	ff cf       	rjmp	.-2      	; 0x19c8 <__stop_program>
